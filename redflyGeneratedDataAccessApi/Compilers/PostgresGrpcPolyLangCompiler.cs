using Humanizer;
using Newtonsoft.Json;
using Npgsql;
using redflyDatabaseAdapters;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace redflyGeneratedDataAccessApi.Compilers;

/// <summary>
/// Generates strongly-typed data source and entity classes for every table in a PostgreSQL database.
/// </summary>
public class PostgresGrpcPolyLangCompiler
{
    private string _connectionString = "";

    public void GenerateForDatabase(string outputFolder)
    {
        // Using EncryptedServerName pattern to match BasePostgresTableDataSource
        string serverName = AppDbSession.PostgresDatabase!.DecryptedServerName;
        string databaseName = AppDbSession.PostgresDatabase.DecryptedDatabaseName;
        string userName = AppDbSession.PostgresDatabase.DecryptedUserName;
        string password = AppDbSession.PostgresDatabase.GetPassword();
        
        // Build connection string with appropriate Npgsql format
        _connectionString = $"Host={serverName};Database={databaseName};Username={userName};Password={password};";

        var tables = GetTables(_connectionString);
        
        Console.WriteLine($"Found {tables.Count} tables in database.");

        foreach (var table in tables)
        {
            if (IsSystemTable(table.Schema, table.Name))
            {
                Console.WriteLine($"Skipping System table: {table.Schema}.{table.Name}...");
                continue;
            }

            var columns = GetColumns(_connectionString, table.Schema, table.Name);

            Console.WriteLine($"Generating code for [{table.Schema}].[{table.Name}] with {columns.Count} columns...");
            
            // Create properly cased class name using our enhanced ToPascalCase method
            var schemaName = ToPascalCase(table.Schema);
            var tableName = ToPascalCase(table.Name);
            var classBaseName = $"{schemaName}{tableName}";
            
            Console.WriteLine($"  Class name will be: {classBaseName}");
            
            var code = GenerateCodeForTable(classBaseName, table, columns);
            var fileName = Path.Combine(outputFolder, $"{classBaseName}DataSource.cs");
            File.WriteAllText(fileName, code);
            
            Console.WriteLine($"  Generated file: {Path.GetFileName(fileName)}");
        }

        // Create a timestamp file to track when code was last generated
        string timestampFile = Path.Combine(outputFolder, "redfly-compiler-readme.txt");
        string timestamp = DateTime.Now.ToString("MM/dd/yy hh:mm:ss tt");
        File.WriteAllText(timestampFile, $"Code last generated by {this.GetType().Name} on {timestamp}");

        Console.WriteLine("Code generation complete.");
    }

    private List<(string Schema, string Name)> GetTables(string connectionString)
    {
        var tables = new List<(string, string)>();
        using var conn = new NpgsqlConnection(connectionString);
        conn.Open();
        using var cmd = conn.CreateCommand();
        cmd.CommandText = @"
            SELECT table_schema, table_name 
            FROM information_schema.tables 
            WHERE table_type = 'BASE TABLE' 
            AND table_schema NOT IN ('pg_catalog', 'information_schema')";
        using var reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            tables.Add((reader.GetString(0), reader.GetString(1)));
        }
        return tables;
    }

    private bool IsSystemTable(string schema, string tableName)
    {
        var systemSchemas = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "pg_catalog", "information_schema", "pg_toast"
        };
        
        if (systemSchemas.Contains(schema))
            return true;
        
        if (tableName.StartsWith("pg_", StringComparison.OrdinalIgnoreCase))
            return true;
            
        return false;
    }

    private List<(string Name, string Type, bool IsNullable, bool IsPrimaryKey)> GetColumns(string connectionString, string schema, string table)
    {
        var columns = new List<(string, string, bool, bool)>();
        var pkColumns = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        using (var conn = new NpgsqlConnection(connectionString))
        {
            conn.Open();
            // Get primary key columns
            using (var pkCmd = conn.CreateCommand())
            {
                pkCmd.CommandText = @"
                    SELECT a.attname
                    FROM pg_index i
                    JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey)
                    JOIN pg_class c ON c.oid = i.indrelid
                    JOIN pg_namespace n ON n.oid = c.relnamespace
                    WHERE i.indisprimary 
                    AND n.nspname = @schema 
                    AND c.relname = @table";
                pkCmd.Parameters.AddWithValue("@schema", schema);
                pkCmd.Parameters.AddWithValue("@table", table);
                using var pkReader = pkCmd.ExecuteReader();
                while (pkReader.Read())
                {
                    pkColumns.Add(pkReader.GetString(0));
                }
            }
            
            // Get columns with more detailed type information for arrays and user-defined types
            using (var cmd = conn.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT 
                        c.column_name, 
                        CASE 
                            WHEN c.udt_name = '_varchar' OR c.udt_name LIKE '\\_%' THEN 
                                'array_' || REPLACE(c.udt_name, '_', '')
                            ELSE c.data_type 
                        END as data_type,
                        c.is_nullable,
                        c.udt_name
                    FROM information_schema.columns c
                    WHERE c.table_schema = @schema 
                    AND c.table_name = @table
                    ORDER BY c.ordinal_position";
                cmd.Parameters.AddWithValue("@schema", schema);
                cmd.Parameters.AddWithValue("@table", table);
                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    var colName = reader.GetString(0);
                    var colType = reader.GetString(1);
                    var isNullable = reader.GetString(2) == "YES";
                    var udtName = reader.GetString(3);
                    
                    // Special handling for array types
                    if (udtName.StartsWith("_"))
                    {
                        colType = "array_" + udtName.Substring(1);
                    }
                    
                    var isPk = pkColumns.Contains(colName);
                    columns.Add((colName, colType, isNullable, isPk));
                }
            }
        }
        return columns;
    }

    private string RemoveSpaces(string input)
    {
        return input.Replace(" ", "");
    }

    private string ToCamelCase(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        input = RemoveSpaces(input);
        if (input.Length == 1) return input.ToLowerInvariant();

        // Use Humanizer to convert to camel case
        var camelize = input.Camelize();

        // Handle known abbreviations
        foreach (var abbr in KnownAbbreviations)
        {
            string lowerAbbr = abbr.ToLowerInvariant();
            if (camelize.Contains(lowerAbbr, StringComparison.OrdinalIgnoreCase))
            {
                // First char of abbreviation should be lowercase in camelCase
                string replacement = char.ToLowerInvariant(abbr[0]) + abbr.Substring(1);
                camelize = Regex.Replace(camelize, $"\\b{lowerAbbr}\\b", replacement, RegexOptions.IgnoreCase);
            }
        }

        return camelize;
    }

    private static readonly HashSet<string> KnownAbbreviations = new(StringComparer.OrdinalIgnoreCase)
    {
        "ID", "GUID", "URL", "API", "SKU", "XML", "JSON", "IP", "SQL", "DB", "UID"
    };

    private string ToPascalCase(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        input = RemoveSpaces(input);
        if (input.Length == 1) return input.ToUpperInvariant();

        // Use Humanizer's Pascalize method
        var pascalized = input.Pascalize();

        // Handle known abbreviations
        foreach (var abbr in KnownAbbreviations)
        {
            if (pascalized.Contains(abbr, StringComparison.OrdinalIgnoreCase))
            {
                pascalized = Regex.Replace(pascalized, $"\\b{abbr}\\b", abbr, RegexOptions.IgnoreCase);
            }
        }

        return pascalized;
    }

    private string ToParameterCase(string input)
    {
        // PascalCase to camelCase using Humanizer
        if (string.IsNullOrEmpty(input)) return input;

        // First ensure proper Pascal casing with Humanizer
        var pascal = ToPascalCase(input);

        // Then convert to camelCase
        return pascal.Camelize();
    }

    private string GenerateCodeForTable(string classBaseName, (string Schema, string Name) table, List<(string Name, string Type, bool IsNullable, bool IsPrimaryKey)> columns)
    {
        var sb = new StringBuilder();
        
        // Ensure proper Pascal casing for entity name and related class names
        var entityName = classBaseName;
        
        var dataSourceName = $"{entityName}DataSource";
        
        // Usings
        sb.AppendLine("using Newtonsoft.Json;");
        sb.AppendLine("using Newtonsoft.Json.Linq;");
        sb.AppendLine("using RedflyCoreFramework;");
        sb.AppendLine("using redflyDatabaseAdapters;");
        sb.AppendLine("using redflyGeneratedDataAccessApi.Base;");
        sb.AppendLine("using redflyGeneratedDataAccessApi.Common;");
        sb.AppendLine("using redflyGeneratedDataAccessApi.Protos.DatabaseApi;");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine();
        
        // Get database name from connection string
        var dbName = GetDatabaseNameFromConnectionString(_connectionString);
        var namespaceName = $"redflyGeneratedDataAccessApi.Postgres.{dbName}";
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();
        sb.AppendLine($"// Strongly-typed classes for [{table.Schema}].[{table.Name}] generated by the");
        sb.AppendLine($"// redfly {this.GetType().Name}");
        sb.AppendLine("// This is only meant to be indicative of the features available in the core product.");
        sb.AppendLine();
        
        // Entity class
        sb.AppendLine($"public class {entityName} : BasePostgresTableSchema");
        sb.AppendLine("{");
        
        // Process all columns with improved casing
        foreach (var col in columns)
        {
            var csharpType = MapPostgresTypeToCSharp(col.Type, col.IsNullable);
            var propName = ToPascalCase(col.Name);
            
            // If it's a non-nullable string, initialize to string.Empty
            if (csharpType == "string" && !col.IsNullable)
                sb.AppendLine($"    public string {propName} {{ get; set; }} = string.Empty;");
            // If it's a non-nullable byte array, initialize to Array.Empty<byte>()
            else if (csharpType == "byte[]" && !col.IsNullable)
                sb.AppendLine($"    public byte[] {propName} {{ get; set; }} = Array.Empty<byte>();");
            // If it's a nullable byte array
            else if (csharpType == "byte[]?" || (csharpType == "byte[]" && col.IsNullable))
                sb.AppendLine($"    public byte[]? {propName} {{ get; set; }}");
            // If it's a JObject (JSON)
            else if (csharpType == "JObject" && !col.IsNullable)
                sb.AppendLine($"    public JObject {propName} {{ get; set; }} = new JObject();");
            else if (csharpType == "JObject?" || (csharpType == "JObject" && col.IsNullable))
                sb.AppendLine($"    public JObject? {propName} {{ get; set; }}");
            // If it's a JArray (JSON Array)
            else if (csharpType == "JArray" && !col.IsNullable)
                sb.AppendLine($"    public JArray {propName} {{ get; set; }} = new JArray();");
            else if (csharpType == "JArray?" || (csharpType == "JArray" && col.IsNullable))
                sb.AppendLine($"    public JArray? {propName} {{ get; set; }}");
            // If it's a List<T>
            else if (csharpType.StartsWith("List<") && !col.IsNullable)
                sb.AppendLine($"    public {csharpType} {propName} {{ get; set; }} = new();");
            else if (csharpType.StartsWith("List<") && col.IsNullable)
                sb.AppendLine($"    public {csharpType}? {propName} {{ get; set; }}");
            // If it's a non-nullable value type, just declare
            else if (!col.IsNullable && (csharpType == "Guid" || csharpType == "int" || csharpType == "decimal" || csharpType == "byte" || csharpType == "short" || csharpType == "long" || csharpType == "bool" || csharpType == "float" || csharpType == "double"))
                sb.AppendLine($"    public {csharpType} {propName} {{ get; set; }}");
            // If it's a nullable value type, use ?
            else if (col.IsNullable && (csharpType == "Guid" || csharpType == "int" || csharpType == "decimal" || csharpType == "byte" || csharpType == "short" || csharpType == "long" || csharpType == "bool" || csharpType == "float" || csharpType == "double"))
                sb.AppendLine($"    public {csharpType}? {propName} {{ get; set; }}");
            // Otherwise, just declare
            else
                sb.AppendLine($"    public {csharpType} {propName} {{ get; set; }}");
        }
        sb.AppendLine("}");
        sb.AppendLine();
        
        // RowsData class
        sb.AppendLine($"public class {entityName}RowsData : BaseTableRowsData");
        sb.AppendLine("{");
        sb.AppendLine($"    public List<{entityName}> Rows {{ get; set; }} = new();");
        sb.AppendLine("}");
        sb.AppendLine();
        
        // InsertedData class
        sb.AppendLine($"public class {entityName}InsertedData : BaseTableInsertedData");
        sb.AppendLine("{");
        sb.AppendLine($"    public {entityName}? InsertedRow {{ get; set; }}");
        sb.AppendLine("}");
        sb.AppendLine();
        
        // RowData class
        sb.AppendLine($"public class {entityName}RowData : BaseTableRowData");
        sb.AppendLine("{");
        sb.AppendLine($"    public {entityName}? Row {{ get; set; }}");
        sb.AppendLine("}");
        sb.AppendLine();
        
        // DataSource class
        sb.AppendLine($"public class {dataSourceName} : BasePostgresTableDataSource<{entityName}>");
        sb.AppendLine("{");
        
        // Constructor
        sb.AppendLine($"    public {dataSourceName}() : base()");
        sb.AppendLine("    {");
        sb.AppendLine($"        _encSchema = RedflyEncryption.EncryptToString(\"{table.Schema}\");");
        sb.AppendLine($"        _encTable = RedflyEncryption.EncryptToString(\"{table.Name}\");");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        // Primary key columns
        var pkCols = columns.Where(c => c.IsPrimaryKey).ToList();
        
        // DeleteAsync
        if (pkCols.Count > 0)
        {
            var pkParams = string.Join(", ", pkCols.Select(c => $"{MapPostgresTypeToCSharp(c.Type, c.IsNullable)} {ToParameterCase(c.Name)}"));
            sb.AppendLine($"    public async Task<DeletedData> DeleteAsync({pkParams}, bool modifyCache = true)");
            sb.AppendLine("    {");
            sb.AppendLine("        var req = base.CreateDeleteRequest(modifyCache);");
            foreach (var pk in pkCols)
                sb.AppendLine($"        req.PrimaryKeyValues.Add(\"{pk.Name.ToLower()}\", {ToParameterCase(pk.Name)}.ToString());");
            sb.AppendLine("        return await base.DeleteCoreAsync(req);");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
        
        // GetRowsAsync
        sb.AppendLine($"    public async Task<{entityName}RowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = \"\", string orderBySort = \"\", bool useCache = true)");
        sb.AppendLine("    {");
        sb.AppendLine("        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);");
        sb.AppendLine("        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);");
        sb.AppendLine($"        var rows = new List<{entityName}>();");
        sb.AppendLine("        foreach (var row in resp.Rows)");
        sb.AppendLine("        {");
        sb.AppendLine("            rows.Add(MapRowToTableEntity(row));");
        sb.AppendLine("        }");
        sb.AppendLine($"        return new {entityName}RowsData");
        sb.AppendLine("        {");
        sb.AppendLine("            Success = resp.Success,");
        sb.AppendLine("            Rows = rows,");
        sb.AppendLine("            FromCache = resp.FromCache,");
        sb.AppendLine("            Message = resp.Message");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        // InsertAsync
        sb.AppendLine($"    public async Task<{entityName}InsertedData> InsertAsync({entityName} entity, bool modifyCache = true)");
        sb.AppendLine("    {");
        sb.AppendLine("        var req = base.CreateInsertRequest(entity, modifyCache);");
        sb.AppendLine("        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);");
        sb.AppendLine($"        return new {entityName}InsertedData");
        sb.AppendLine("        {");
        sb.AppendLine("            Success = resp.Success,");
        sb.AppendLine("            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,");
        sb.AppendLine("            CacheUpdated = resp.CacheUpdated,");
        sb.AppendLine("            Message = resp.Message");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        // GetAsync
        if (pkCols.Count > 0)
        {
            var pkParams = string.Join(", ", pkCols.Select(c => $"{MapPostgresTypeToCSharp(c.Type, c.IsNullable)} {ToParameterCase(c.Name)}"));
            sb.AppendLine($"    public async Task<{entityName}RowData> GetAsync({pkParams}, bool useCache = true)");
            sb.AppendLine("    {");
            sb.AppendLine("        var req = base.CreateGetRequest();");
            foreach (var pk in pkCols)
                sb.AppendLine($"        req.PrimaryKeyValues.Add(\"{pk.Name.ToLower()}\", {ToParameterCase(pk.Name)}.ToString());");
            sb.AppendLine("        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);");
            sb.AppendLine($"        return new {entityName}RowData");
            sb.AppendLine("        {");
            sb.AppendLine("            Success = resp.Success,");
            sb.AppendLine("            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,");
            sb.AppendLine("            FromCache = resp.FromCache,");
            sb.AppendLine("            Message = resp.Message");
            sb.AppendLine("        };");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
        
        // UpdateAsync
        sb.AppendLine($"    public async Task<UpdatedData> UpdateAsync({entityName} entity, bool modifyCache = true)");
        sb.AppendLine("    {");
        sb.AppendLine("        var req = CreateUpdateRequest(entity, modifyCache);");
        sb.AppendLine("        return await UpdateCoreAsync(req);");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        // MapRowToTableEntity
        sb.AppendLine($"    protected override {entityName} MapRowToTableEntity(Row row)");
        sb.AppendLine("    {");
        sb.AppendLine("        var dict = new Dictionary<string, string?>();");
        sb.AppendLine("        foreach (var entry in row.Entries)");
        sb.AppendLine("        {");
        sb.AppendLine("            dict[entry.Column] = entry.Value?.StringValue;");
        sb.AppendLine("        }");
        sb.AppendLine($"        return new {entityName}");
        sb.AppendLine("        {");
        
        int varCounter = 1;
        foreach (var col in columns)
        {
            var propName = ToPascalCase(col.Name);
            var csharpType = MapPostgresTypeToCSharp(col.Type, col.IsNullable);
            string varName = $"v{varCounter}";
            string colName = col.Name.ToLower();
            
            // Ensure proper handling of nullable and non-nullable types
            if (csharpType.EndsWith("?"))
            {
                sb.AppendLine($"            {propName} = dict.TryGetValue(\"{colName}\", out var {varName}) && !string.IsNullOrEmpty({varName}) ? ({csharpType.TrimEnd('?')})Convert.ChangeType({varName}, typeof({csharpType.TrimEnd('?')})) : null,");
            }
            else
            {
                sb.AppendLine($"            {propName} = dict.TryGetValue(\"{colName}\", out var {varName}) && !string.IsNullOrEmpty({varName}) ? ({csharpType})Convert.ChangeType({varName}, typeof({csharpType})) : default({csharpType}),");
            }
            
            varCounter++;
        }
        
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
        
        // MapTableEntityToRow
        sb.AppendLine($"    protected override Row MapTableEntityToRow({entityName} entity, DbOperationType dbOperationType)");
        sb.AppendLine("    {");
        sb.AppendLine("        var row = new Row();");
        sb.AppendLine();
        
        if (pkCols.Count > 0)
        {
            foreach (var pk in pkCols)
            {
                var pkProp = ToPascalCase(pk.Name);
                var csharpType = MapPostgresTypeToCSharp(pk.Type, pk.IsNullable);
                
                // Handle different types
                if (csharpType == "JObject" || csharpType == "JObject?")
                    sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{pk.Name.ToLower()}\", Value = new Value {{ StringValue = entity.{pkProp}?.ToString(Formatting.None) ?? \"{{}}\" }} }});");
                else if (csharpType == "JArray" || csharpType == "JArray?")
                    sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{pk.Name.ToLower()}\", Value = new Value {{ StringValue = entity.{pkProp}?.ToString(Formatting.None) ?? \"[]\" }} }});");
                else if (csharpType.StartsWith("List<"))
                    sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{pk.Name.ToLower()}\", Value = new Value {{ StringValue = JsonConvert.SerializeObject(entity.{pkProp}) }} }});");
                else if (csharpType == "byte[]" || csharpType == "byte[]?")
                    sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{pk.Name.ToLower()}\", Value = new Value {{ StringValue = entity.{pkProp} != null ? Convert.ToBase64String(entity.{pkProp}) : null }} }});");
                else
                    sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{pk.Name.ToLower()}\", Value = new Value {{ StringValue = entity.{pkProp}.ToString() }} }});");
            }
            sb.AppendLine();
        }
        
        sb.AppendLine("        // For Postgres, add all non-primary key columns");
        
        // Add all non-primary key columns
        foreach (var col in columns.Where(c => !c.IsPrimaryKey))
        {
            var propName = ToPascalCase(col.Name);
            var csharpType = MapPostgresTypeToCSharp(col.Type, col.IsNullable);
            string colName = col.Name.ToLower();
            
            // Add column to row based on type
            if (csharpType == "DateTime")
            {
                if (propName.Equals("ModifiedDate", StringComparison.OrdinalIgnoreCase))
                {
                    sb.AppendLine($"        if (entity.{propName} != DateTime.MinValue)");
                    sb.AppendLine("        {");
                    sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.ToString(\"yyyy-MM-dd HH:mm:ss.fff\") }} }});");
                    sb.AppendLine("        }");
                }
                else
                {
                    sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.ToString() }} }});");
                }
            }
            else if (csharpType == "DateTime?")
            {
                sb.AppendLine($"        if (entity.{propName} != null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.Value.ToString(\"yyyy-MM-dd HH:mm:ss.fff\") }} }});");
                sb.AppendLine("        }");
                sb.AppendLine("        else");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = null }} }});");
                sb.AppendLine("        }");
            }
            // Byte array handling
            else if (csharpType == "byte[]")
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName} != null ? Convert.ToBase64String(entity.{propName}) : null }} }});");
            }
            else if (csharpType == "byte[]?")
            {
                sb.AppendLine($"        if (entity.{propName} != null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = Convert.ToBase64String(entity.{propName}) }} }});");
                sb.AppendLine("        }");
                sb.AppendLine("        else");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = null }} }});");
                sb.AppendLine("        }");
            }
            // JSON handling
            else if (csharpType == "JObject")
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}?.ToString(Formatting.None) ?? \"{{}}\" }} }});");
            }
            else if (csharpType == "JObject?")
            {
                sb.AppendLine($"        if (entity.{propName} != null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.ToString(Formatting.None) }} }});");
                sb.AppendLine("        }");
                sb.AppendLine("        else");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = null }} }});");
                sb.AppendLine("        }");
            }
            // JSON Array handling
            else if (csharpType == "JArray")
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}?.ToString(Formatting.None) ?? \"[]\" }} }});");
            }
            else if (csharpType == "JArray?")
            {
                sb.AppendLine($"        if (entity.{propName} != null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.ToString(Formatting.None) }} }});");
                sb.AppendLine("        }");
                sb.AppendLine("        else");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = null }} }});");
                sb.AppendLine("        }");
            }
            // List<T> handling
            else if (csharpType.StartsWith("List<"))
            {
                sb.AppendLine($"        if (entity.{propName} != null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = JsonConvert.SerializeObject(entity.{propName}) }} }});");
                sb.AppendLine("        }");
                sb.AppendLine("        else");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = \"[]\" }} }});");
                sb.AppendLine("        }");
            }
            // String handling
            else if (csharpType == "string")
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName} }} }});");
            }
            else if (csharpType == "string?")
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName} }} }});");
            }
            // Value type handling
            else if (csharpType == "int" || csharpType == "long" || csharpType == "short" || csharpType == "byte" || 
                     csharpType == "bool" || csharpType == "decimal" || csharpType == "double" || csharpType == "float" || 
                     csharpType == "Guid")
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.ToString() }} }});");
            }
            // Nullable value type handling
            else if (csharpType == "int?" || csharpType == "long?" || csharpType == "short?" || csharpType == "byte?" || 
                     csharpType == "bool?" || csharpType == "decimal?" || csharpType == "double?" || csharpType == "float?" || 
                     csharpType == "Guid?")
            {
                sb.AppendLine($"        if (entity.{propName} != null)");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}.ToString() }} }});");
                sb.AppendLine("        }");
                sb.AppendLine("        else");
                sb.AppendLine("        {");
                sb.AppendLine($"            row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = null }} }});");
                sb.AppendLine("        }");
            }
            // Default fallback for unknown types
            else
            {
                sb.AppendLine($"        row.Entries.Add(new RowEntry {{ Column = \"{colName}\", Value = new Value {{ StringValue = entity.{propName}?.ToString() }} }});");
            }
        }
        
        sb.AppendLine("        return row;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }

    private string GetDatabaseNameFromConnectionString(string connectionString)
    {
        try
        {
            var builder = new NpgsqlConnectionStringBuilder(connectionString);
            return builder.Database ?? "AdventureWorks";
        }
        catch
        {
            return "AdventureWorks"; // Default fallback
        }
    }

    private string MapPostgresTypeToCSharp(string pgType, bool isNullable)
    {
        string type = pgType.ToLower() switch
        {
            "integer" or "int" or "int4" => "int",
            "bigint" or "int8" => "long",
            "smallint" or "int2" => "short",
            "boolean" or "bool" => "bool",
            "numeric" or "decimal" or "money" => "decimal",
            "real" => "float",
            "double precision" => "double",
            "timestamp" or "timestamp without time zone" or "timestamp with time zone" or "date" => "DateTime",
            "text" or "character varying" or "varchar" or "character" or "char" => "string",
            "uuid" => "Guid",
            "bytea" => "byte[]",
            "json" or "jsonb" => "JObject",
            "array_json" or "array_jsonb" => "JArray",
            "array_text" or "array_varchar" or "array_character" or "array_char" => "List<string>",
            "array_int" or "array_integer" or "array_int4" => "List<int>",
            "array_bigint" or "array_int8" => "List<long>",
            "array_smallint" or "array_int2" => "List<short>",
            "array_boolean" or "array_bool" => "List<bool>",
            "array_numeric" or "array_decimal" => "List<decimal>",
            "array_real" => "List<float>",
            "array_double" => "List<double>",
            "array_uuid" => "List<Guid>",
            _ => "string"
        };
        
        if (type != "string" && type != "byte[]" && isNullable && !type.StartsWith("List<") && !type.StartsWith("JObject") && !type.StartsWith("JArray"))
            return type + "?";
        if ((type == "string" || type == "JObject" || type == "JArray" || type.StartsWith("List<")) && isNullable)
            return type + "?";
            
        return type;
    }
}