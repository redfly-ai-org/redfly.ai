using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;

namespace redflyGeneratedDataAccessApi.SqlServer.ProxyTestAdventureWorks;

// Strongly-typed classes for [dbo].[ErrorLog] generated by the
// redfly SqlServerGrpcPolyLangCompiler on 05/24/25 10:39:40 PM
// This is only meant to be indicative of the features available in the core product.

public class ErrorLog : BaseSqlServerTableSchema
{
    public int ErrorLogId { get; set; }
    public DateTime ErrorTime { get; set; }
    public string UserName { get; set; } = string.Empty;
    public int ErrorNumber { get; set; }
    public int? ErrorSeverity { get; set; }
    public int? ErrorState { get; set; }
    public string? ErrorProcedure { get; set; }
    public int? ErrorLine { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;
}

public class ErrorLogRowsData : BaseTableRowsData
{
    public List<ErrorLog> Rows { get; set; } = new();
}
public class ErrorLogInsertedData : BaseTableInsertedData
{
    public ErrorLog? InsertedRow { get; set; }
}
public class ErrorLogRowData : BaseTableRowData
{
    public ErrorLog? Row { get; set; }
}

public class ErrorLogDataSource : BaseSqlServerTableDataSource<ErrorLog>
{
    public ErrorLogDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("dbo");
        _encTable = RedflyEncryption.EncryptToString("ErrorLog");
    }

    public async Task<DeletedData> DeleteAsync(int errorLogId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("ErrorLogID", errorLogId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ErrorLogRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ErrorLog>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ErrorLogRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ErrorLogInsertedData> InsertAsync(ErrorLog entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ErrorLogInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ErrorLogRowData> GetAsync(int errorLogId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("ErrorLogID", errorLogId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ErrorLogRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ErrorLog entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ErrorLog MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ErrorLog
        {
            ErrorLogId = dict.TryGetValue("ErrorLogID", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,
            ErrorTime = dict.TryGetValue("ErrorTime", out var v2) && DateTime.TryParse(v2, out var d2) ? d2 : DateTime.MinValue,
            UserName = dict.TryGetValue("UserName", out var v3) ? v3 ?? string.Empty : string.Empty,
            ErrorNumber = dict.TryGetValue("ErrorNumber", out var v4) && int.TryParse(v4, out var i4) ? i4 : 0,
            ErrorSeverity = dict.TryGetValue("ErrorSeverity", out var v5) && !string.IsNullOrEmpty(v5) && int.TryParse(v5, out var i5) ? i5 : null,
            ErrorState = dict.TryGetValue("ErrorState", out var v6) && !string.IsNullOrEmpty(v6) && int.TryParse(v6, out var i6) ? i6 : null,
            ErrorProcedure = dict.TryGetValue("ErrorProcedure", out var v7) ? v7 : null,
            ErrorLine = dict.TryGetValue("ErrorLine", out var v8) && !string.IsNullOrEmpty(v8) && int.TryParse(v8, out var i8) ? i8 : null,
            ErrorMessage = dict.TryGetValue("ErrorMessage", out var v9) ? v9 ?? string.Empty : string.Empty,
            Version = dict.TryGetValue("Version", out var vVersion) ? Convert.FromBase64String(vVersion ?? "") : Array.Empty<byte>(),
        };
    }

    protected override Row MapTableEntityToRow(ErrorLog entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "ErrorLogID", Value = new Value { StringValue = entity.ErrorLogId.ToString() } });
        }
        if (entity.ErrorTime != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "ErrorTime", Value = new Value { StringValue = entity.ErrorTime.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        row.Entries.Add(new RowEntry { Column = "UserName", Value = new Value { StringValue = entity.UserName } });
        row.Entries.Add(new RowEntry { Column = "ErrorNumber", Value = new Value { StringValue = entity.ErrorNumber.ToString() } });
        if (entity.ErrorSeverity != null)
        {
            row.Entries.Add(new RowEntry { Column = "ErrorSeverity", Value = new Value { StringValue = entity.ErrorSeverity.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "ErrorSeverity", Value = new Value { StringValue = null } });
        }
        if (entity.ErrorState != null)
        {
            row.Entries.Add(new RowEntry { Column = "ErrorState", Value = new Value { StringValue = entity.ErrorState.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "ErrorState", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "ErrorProcedure", Value = new Value { StringValue = entity.ErrorProcedure } });
        if (entity.ErrorLine != null)
        {
            row.Entries.Add(new RowEntry { Column = "ErrorLine", Value = new Value { StringValue = entity.ErrorLine.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "ErrorLine", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "ErrorMessage", Value = new Value { StringValue = entity.ErrorMessage } });
        return row;
    }
}
