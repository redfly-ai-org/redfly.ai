using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;

namespace redflyGeneratedDataAccessApi.SqlServer.ProxyTestAdventureWorks;

// Strongly-typed classes for [SalesLT].[Customer] generated by the
// redfly SqlServerGrpcPolyLangCompiler on 05/24/25 10:39:40 PM
// This is only meant to be indicative of the features available in the core product.

public class SalesLTCustomer : BaseTableEntity
{
    public int CustomerId { get; set; }
    public bool NameStyle { get; set; }
    public string? Title { get; set; }
    public string FirstName { get; set; } = string.Empty;
    public string? MiddleName { get; set; }
    public string LastName { get; set; } = string.Empty;
    public string? Suffix { get; set; }
    public string? CompanyName { get; set; }
    public string? SalesPerson { get; set; }
    public string? EmailAddress { get; set; }
    public string? Phone { get; set; }
    public string PasswordHash { get; set; } = string.Empty;
    public string PasswordSalt { get; set; } = string.Empty;
    public Guid Rowguid { get; set; }
    public DateTime ModifiedDate { get; set; }
}

public class SalesLTCustomerRowsData : BaseTableRowsData
{
    public List<SalesLTCustomer> Rows { get; set; } = new();
}
public class SalesLTCustomerInsertedData : BaseTableInsertedData
{
    public SalesLTCustomer? InsertedRow { get; set; }
}
public class SalesLTCustomerRowData : BaseTableRowData
{
    public SalesLTCustomer? Row { get; set; }
}

public class SalesLTCustomerDataSource : BaseTableDataSource<SalesLTCustomer>
{
    public SalesLTCustomerDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("SalesLT");
        _encTable = RedflyEncryption.EncryptToString("Customer");
    }

    public async Task<DeletedData> DeleteAsync(int customerId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("CustomerID", customerId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesLTCustomerRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesLTCustomer>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesLTCustomerRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesLTCustomerInsertedData> InsertAsync(SalesLTCustomer entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesLTCustomerInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesLTCustomerRowData> GetAsync(int customerId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("CustomerID", customerId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesLTCustomerRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesLTCustomer entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesLTCustomer MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesLTCustomer
        {
            CustomerId = dict.TryGetValue("CustomerID", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,
            NameStyle = dict.TryGetValue("NameStyle", out var v2) && bool.TryParse(v2, out var b2) ? b2 : false,
            Title = dict.TryGetValue("Title", out var v3) ? v3 : null,
            FirstName = dict.TryGetValue("FirstName", out var v4) ? v4 ?? string.Empty : string.Empty,
            MiddleName = dict.TryGetValue("MiddleName", out var v5) ? v5 : null,
            LastName = dict.TryGetValue("LastName", out var v6) ? v6 ?? string.Empty : string.Empty,
            Suffix = dict.TryGetValue("Suffix", out var v7) ? v7 : null,
            CompanyName = dict.TryGetValue("CompanyName", out var v8) ? v8 : null,
            SalesPerson = dict.TryGetValue("SalesPerson", out var v9) ? v9 : null,
            EmailAddress = dict.TryGetValue("EmailAddress", out var v10) ? v10 : null,
            Phone = dict.TryGetValue("Phone", out var v11) ? v11 : null,
            PasswordHash = dict.TryGetValue("PasswordHash", out var v12) ? v12 ?? string.Empty : string.Empty,
            PasswordSalt = dict.TryGetValue("PasswordSalt", out var v13) ? v13 ?? string.Empty : string.Empty,
            Rowguid = dict.TryGetValue("rowguid", out var v14) && Guid.TryParse(v14, out var g14) ? g14 : Guid.Empty,
            ModifiedDate = dict.TryGetValue("ModifiedDate", out var v15) && DateTime.TryParse(v15, out var d15) ? d15 : DateTime.MinValue,
            Version = dict.TryGetValue("Version", out var vVersion) ? Convert.FromBase64String(vVersion ?? "") : Array.Empty<byte>(),
        };
    }

    protected override Row MapTableEntityToRow(SalesLTCustomer entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "CustomerID", Value = new Value { StringValue = entity.CustomerId.ToString() } });
        }
        row.Entries.Add(new RowEntry { Column = "NameStyle", Value = new Value { StringValue = entity.NameStyle.ToString() } });
        row.Entries.Add(new RowEntry { Column = "Title", Value = new Value { StringValue = entity.Title } });
        row.Entries.Add(new RowEntry { Column = "FirstName", Value = new Value { StringValue = entity.FirstName } });
        row.Entries.Add(new RowEntry { Column = "MiddleName", Value = new Value { StringValue = entity.MiddleName } });
        row.Entries.Add(new RowEntry { Column = "LastName", Value = new Value { StringValue = entity.LastName } });
        row.Entries.Add(new RowEntry { Column = "Suffix", Value = new Value { StringValue = entity.Suffix } });
        row.Entries.Add(new RowEntry { Column = "CompanyName", Value = new Value { StringValue = entity.CompanyName } });
        row.Entries.Add(new RowEntry { Column = "SalesPerson", Value = new Value { StringValue = entity.SalesPerson } });
        row.Entries.Add(new RowEntry { Column = "EmailAddress", Value = new Value { StringValue = entity.EmailAddress } });
        row.Entries.Add(new RowEntry { Column = "Phone", Value = new Value { StringValue = entity.Phone } });
        row.Entries.Add(new RowEntry { Column = "PasswordHash", Value = new Value { StringValue = entity.PasswordHash } });
        row.Entries.Add(new RowEntry { Column = "PasswordSalt", Value = new Value { StringValue = entity.PasswordSalt } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.ModifiedDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "ModifiedDate", Value = new Value { StringValue = entity.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
