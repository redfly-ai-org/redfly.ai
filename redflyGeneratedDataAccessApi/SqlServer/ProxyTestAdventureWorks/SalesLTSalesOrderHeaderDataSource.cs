using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;

namespace redflyGeneratedDataAccessApi.SqlServer.ProxyTestAdventureWorks;

// Strongly-typed classes for [SalesLT].[SalesOrderHeader] generated by the
// redfly SqlServerGrpcPolyLangCompiler on 05/24/25 10:39:40 PM
// This is only meant to be indicative of the features available in the core product.

public class SalesLTSalesOrderHeader : BaseTableEntity
{
    public int SalesOrderId { get; set; }
    public byte RevisionNumber { get; set; }
    public DateTime OrderDate { get; set; }
    public DateTime DueDate { get; set; }
    public DateTime? ShipDate { get; set; }
    public byte Status { get; set; }
    public bool OnlineOrderFlag { get; set; }
    public string SalesOrderNumber { get; set; } = string.Empty;
    public string? PurchaseOrderNumber { get; set; }
    public string? AccountNumber { get; set; }
    public int CustomerId { get; set; }
    public int? ShipToAddressId { get; set; }
    public int? BillToAddressId { get; set; }
    public string ShipMethod { get; set; } = string.Empty;
    public string? CreditCardApprovalCode { get; set; }
    public decimal SubTotal { get; set; }
    public decimal TaxAmt { get; set; }
    public decimal Freight { get; set; }
    public decimal TotalDue { get; set; }
    public string? Comment { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime ModifiedDate { get; set; }
}

public class SalesLTSalesOrderHeaderRowsData : BaseTableRowsData
{
    public List<SalesLTSalesOrderHeader> Rows { get; set; } = new();
}
public class SalesLTSalesOrderHeaderInsertedData : BaseTableInsertedData
{
    public SalesLTSalesOrderHeader? InsertedRow { get; set; }
}
public class SalesLTSalesOrderHeaderRowData : BaseTableRowData
{
    public SalesLTSalesOrderHeader? Row { get; set; }
}

public class SalesLTSalesOrderHeaderDataSource : BaseTableDataSource<SalesLTSalesOrderHeader>
{
    public SalesLTSalesOrderHeaderDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("SalesLT");
        _encTable = RedflyEncryption.EncryptToString("SalesOrderHeader");
    }

    public async Task<DeletedData> DeleteAsync(int salesOrderId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("SalesOrderID", salesOrderId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesLTSalesOrderHeaderRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesLTSalesOrderHeader>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesLTSalesOrderHeaderRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesLTSalesOrderHeaderInsertedData> InsertAsync(SalesLTSalesOrderHeader entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesLTSalesOrderHeaderInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesLTSalesOrderHeaderRowData> GetAsync(int salesOrderId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("SalesOrderID", salesOrderId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesLTSalesOrderHeaderRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesLTSalesOrderHeader entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesLTSalesOrderHeader MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesLTSalesOrderHeader
        {
            SalesOrderId = dict.TryGetValue("SalesOrderID", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,
            RevisionNumber = dict.TryGetValue("RevisionNumber", out var v2) && byte.TryParse(v2, out var b2) ? b2 : (byte)0,
            OrderDate = dict.TryGetValue("OrderDate", out var v3) && DateTime.TryParse(v3, out var d3) ? d3 : DateTime.MinValue,
            DueDate = dict.TryGetValue("DueDate", out var v4) && DateTime.TryParse(v4, out var d4) ? d4 : DateTime.MinValue,
            ShipDate = dict.TryGetValue("ShipDate", out var v5) && !string.IsNullOrEmpty(v5) && DateTime.TryParse(v5, out var d5) ? d5 : null,
            Status = dict.TryGetValue("Status", out var v6) && byte.TryParse(v6, out var b6) ? b6 : (byte)0,
            OnlineOrderFlag = dict.TryGetValue("OnlineOrderFlag", out var v7) && bool.TryParse(v7, out var b7) ? b7 : false,
            SalesOrderNumber = dict.TryGetValue("SalesOrderNumber", out var v8) ? v8 ?? string.Empty : string.Empty,
            PurchaseOrderNumber = dict.TryGetValue("PurchaseOrderNumber", out var v9) ? v9 : null,
            AccountNumber = dict.TryGetValue("AccountNumber", out var v10) ? v10 : null,
            CustomerId = dict.TryGetValue("CustomerID", out var v11) && int.TryParse(v11, out var i11) ? i11 : 0,
            ShipToAddressId = dict.TryGetValue("ShipToAddressID", out var v12) && !string.IsNullOrEmpty(v12) && int.TryParse(v12, out var i12) ? i12 : null,
            BillToAddressId = dict.TryGetValue("BillToAddressID", out var v13) && !string.IsNullOrEmpty(v13) && int.TryParse(v13, out var i13) ? i13 : null,
            ShipMethod = dict.TryGetValue("ShipMethod", out var v14) ? v14 ?? string.Empty : string.Empty,
            CreditCardApprovalCode = dict.TryGetValue("CreditCardApprovalCode", out var v15) ? v15 : null,
            SubTotal = dict.TryGetValue("SubTotal", out var v16) && decimal.TryParse(v16, out var d16) ? d16 : 0m,
            TaxAmt = dict.TryGetValue("TaxAmt", out var v17) && decimal.TryParse(v17, out var d17) ? d17 : 0m,
            Freight = dict.TryGetValue("Freight", out var v18) && decimal.TryParse(v18, out var d18) ? d18 : 0m,
            TotalDue = dict.TryGetValue("TotalDue", out var v19) && decimal.TryParse(v19, out var d19) ? d19 : 0m,
            Comment = dict.TryGetValue("Comment", out var v20) ? v20 : null,
            Rowguid = dict.TryGetValue("rowguid", out var v21) && Guid.TryParse(v21, out var g21) ? g21 : Guid.Empty,
            ModifiedDate = dict.TryGetValue("ModifiedDate", out var v22) && DateTime.TryParse(v22, out var d22) ? d22 : DateTime.MinValue,
            Version = dict.TryGetValue("Version", out var vVersion) ? Convert.FromBase64String(vVersion ?? "") : Array.Empty<byte>(),
        };
    }

    protected override Row MapTableEntityToRow(SalesLTSalesOrderHeader entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "SalesOrderID", Value = new Value { StringValue = entity.SalesOrderId.ToString() } });
        }
        row.Entries.Add(new RowEntry { Column = "RevisionNumber", Value = new Value { StringValue = entity.RevisionNumber.ToString() } });
        if (entity.OrderDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "OrderDate", Value = new Value { StringValue = entity.OrderDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        if (entity.DueDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "DueDate", Value = new Value { StringValue = entity.DueDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        if (entity.ShipDate != null)
        {
            row.Entries.Add(new RowEntry { Column = "ShipDate", Value = new Value { StringValue = entity.ShipDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        row.Entries.Add(new RowEntry { Column = "Status", Value = new Value { StringValue = entity.Status.ToString() } });
        row.Entries.Add(new RowEntry { Column = "OnlineOrderFlag", Value = new Value { StringValue = entity.OnlineOrderFlag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "SalesOrderNumber", Value = new Value { StringValue = entity.SalesOrderNumber } });
        row.Entries.Add(new RowEntry { Column = "PurchaseOrderNumber", Value = new Value { StringValue = entity.PurchaseOrderNumber } });
        row.Entries.Add(new RowEntry { Column = "AccountNumber", Value = new Value { StringValue = entity.AccountNumber } });
        row.Entries.Add(new RowEntry { Column = "CustomerID", Value = new Value { StringValue = entity.CustomerId.ToString() } });
        if (entity.ShipToAddressId != null)
        {
            row.Entries.Add(new RowEntry { Column = "ShipToAddressID", Value = new Value { StringValue = entity.ShipToAddressId.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "ShipToAddressID", Value = new Value { StringValue = null } });
        }
        if (entity.BillToAddressId != null)
        {
            row.Entries.Add(new RowEntry { Column = "BillToAddressID", Value = new Value { StringValue = entity.BillToAddressId.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "BillToAddressID", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "ShipMethod", Value = new Value { StringValue = entity.ShipMethod } });
        row.Entries.Add(new RowEntry { Column = "CreditCardApprovalCode", Value = new Value { StringValue = entity.CreditCardApprovalCode } });
        row.Entries.Add(new RowEntry { Column = "SubTotal", Value = new Value { StringValue = entity.SubTotal.ToString() } });
        row.Entries.Add(new RowEntry { Column = "TaxAmt", Value = new Value { StringValue = entity.TaxAmt.ToString() } });
        row.Entries.Add(new RowEntry { Column = "Freight", Value = new Value { StringValue = entity.Freight.ToString() } });
        row.Entries.Add(new RowEntry { Column = "TotalDue", Value = new Value { StringValue = entity.TotalDue.ToString() } });
        row.Entries.Add(new RowEntry { Column = "Comment", Value = new Value { StringValue = entity.Comment } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.ModifiedDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "ModifiedDate", Value = new Value { StringValue = entity.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
