using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Protos.SqlServer;

namespace redflyGeneratedDataAccessApi.SqlServer.ProxyTestAdventureWorks;

// Strongly-typed classes for [SalesLT].[CustomerAddress] generated by the
// redfly SqlServerGrpcPolyLangCompiler on 05/24/25 12:43:05 AM
// This is only meant to be indicative of the features available in the core product.

public class SalesLTCustomerAddress : BaseTableEntity
{
    public int CustomerId { get; set; }
    public int AddressId { get; set; }
    public string AddressType { get; set; } = string.Empty;
    public Guid Rowguid { get; set; }
    public DateTime ModifiedDate { get; set; }
}

public class SalesLTCustomerAddressRowsData : BaseTableRowsData
{
    public List<SalesLTCustomerAddress> Rows { get; set; } = new();
}
public class SalesLTCustomerAddressInsertedData : BaseTableInsertedData
{
    public SalesLTCustomerAddress? InsertedRow { get; set; }
}
public class SalesLTCustomerAddressRowData : BaseTableRowData
{
    public SalesLTCustomerAddress? Row { get; set; }
}

public class SalesLTCustomerAddressDataSource : BaseTableDataSource<SalesLTCustomerAddress>
{
    public SalesLTCustomerAddressDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("SalesLT");
        _encTable = RedflyEncryption.EncryptToString("CustomerAddress");
    }

    public async Task<DeletedData> DeleteAsync(int customerId, int addressId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("CustomerID", customerId.ToString());
        req.PrimaryKeyValues.Add("AddressID", addressId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesLTCustomerAddressRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesLTCustomerAddress>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesLTCustomerAddressRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesLTCustomerAddressInsertedData> InsertAsync(SalesLTCustomerAddress entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesLTCustomerAddressInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesLTCustomerAddressRowData> GetAsync(int customerId, int addressId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("CustomerID", customerId.ToString());
        req.PrimaryKeyValues.Add("AddressID", addressId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesLTCustomerAddressRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesLTCustomerAddress entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesLTCustomerAddress MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesLTCustomerAddress
        {
            CustomerId = dict.TryGetValue("CustomerID", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,

            AddressId = dict.TryGetValue("AddressID", out var v2) && int.TryParse(v2, out var i2) ? i2 : 0,

            AddressType = dict.TryGetValue("AddressType", out var v3) ? v3 ?? string.Empty : string.Empty,

            Rowguid = dict.TryGetValue("rowguid", out var v4) && Guid.TryParse(v4, out var g4) ? g4 : Guid.Empty,

            ModifiedDate = dict.TryGetValue("ModifiedDate", out var v5) && DateTime.TryParse(v5, out var d5) ? d5 : DateTime.MinValue,

            Version = dict.TryGetValue("Version", out var vVersion) ? Convert.FromBase64String(vVersion ?? "") : Array.Empty<byte>(),

        };
    }

    protected override Row MapTableEntityToRow(SalesLTCustomerAddress entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "CustomerID", Value = new Value { StringValue = entity.CustomerId.ToString() } });
            row.Entries.Add(new RowEntry { Column = "AddressID", Value = new Value { StringValue = entity.AddressId.ToString() } });
        }
        row.Entries.Add(new RowEntry { Column = "AddressType", Value = new Value { StringValue = entity.AddressType } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.ModifiedDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "ModifiedDate", Value = new Value { StringValue = entity.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
