using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;

namespace redflyGeneratedDataAccessApi.SqlServer.ProxyTestAdventureWorks;

// Strongly-typed classes for [SalesLT].[SalesOrderDetail] generated by the
// redfly SqlServerGrpcPolyLangCompiler on 05/24/25 10:39:40 PM
// This is only meant to be indicative of the features available in the core product.

public class SalesLTSalesOrderDetail : BaseTableEntity
{
    public int SalesOrderId { get; set; }
    public int SalesOrderDetailId { get; set; }
    public short OrderQty { get; set; }
    public int ProductId { get; set; }
    public decimal UnitPrice { get; set; }
    public decimal UnitPriceDiscount { get; set; }
    public decimal LineTotal { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime ModifiedDate { get; set; }
}

public class SalesLTSalesOrderDetailRowsData : BaseTableRowsData
{
    public List<SalesLTSalesOrderDetail> Rows { get; set; } = new();
}
public class SalesLTSalesOrderDetailInsertedData : BaseTableInsertedData
{
    public SalesLTSalesOrderDetail? InsertedRow { get; set; }
}
public class SalesLTSalesOrderDetailRowData : BaseTableRowData
{
    public SalesLTSalesOrderDetail? Row { get; set; }
}

public class SalesLTSalesOrderDetailDataSource : BaseTableDataSource<SalesLTSalesOrderDetail>
{
    public SalesLTSalesOrderDetailDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("SalesLT");
        _encTable = RedflyEncryption.EncryptToString("SalesOrderDetail");
    }

    public async Task<DeletedData> DeleteAsync(int salesOrderId, int salesOrderDetailId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("SalesOrderID", salesOrderId.ToString());
        req.PrimaryKeyValues.Add("SalesOrderDetailID", salesOrderDetailId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesLTSalesOrderDetailRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesLTSalesOrderDetail>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesLTSalesOrderDetailRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesLTSalesOrderDetailInsertedData> InsertAsync(SalesLTSalesOrderDetail entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesLTSalesOrderDetailInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesLTSalesOrderDetailRowData> GetAsync(int salesOrderId, int salesOrderDetailId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("SalesOrderID", salesOrderId.ToString());
        req.PrimaryKeyValues.Add("SalesOrderDetailID", salesOrderDetailId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesLTSalesOrderDetailRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesLTSalesOrderDetail entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesLTSalesOrderDetail MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesLTSalesOrderDetail
        {
            SalesOrderId = dict.TryGetValue("SalesOrderID", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,
            SalesOrderDetailId = dict.TryGetValue("SalesOrderDetailID", out var v2) && int.TryParse(v2, out var i2) ? i2 : 0,
            OrderQty = dict.TryGetValue("OrderQty", out var v3) && short.TryParse(v3, out var s3) ? s3 : (short)0,
            ProductId = dict.TryGetValue("ProductID", out var v4) && int.TryParse(v4, out var i4) ? i4 : 0,
            UnitPrice = dict.TryGetValue("UnitPrice", out var v5) && decimal.TryParse(v5, out var d5) ? d5 : 0m,
            UnitPriceDiscount = dict.TryGetValue("UnitPriceDiscount", out var v6) && decimal.TryParse(v6, out var d6) ? d6 : 0m,
            LineTotal = dict.TryGetValue("LineTotal", out var v7) && decimal.TryParse(v7, out var d7) ? d7 : 0m,
            Rowguid = dict.TryGetValue("rowguid", out var v8) && Guid.TryParse(v8, out var g8) ? g8 : Guid.Empty,
            ModifiedDate = dict.TryGetValue("ModifiedDate", out var v9) && DateTime.TryParse(v9, out var d9) ? d9 : DateTime.MinValue,
            Version = dict.TryGetValue("Version", out var vVersion) ? Convert.FromBase64String(vVersion ?? "") : Array.Empty<byte>(),
        };
    }

    protected override Row MapTableEntityToRow(SalesLTSalesOrderDetail entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "SalesOrderID", Value = new Value { StringValue = entity.SalesOrderId.ToString() } });
            row.Entries.Add(new RowEntry { Column = "SalesOrderDetailID", Value = new Value { StringValue = entity.SalesOrderDetailId.ToString() } });
        }
        row.Entries.Add(new RowEntry { Column = "OrderQty", Value = new Value { StringValue = entity.OrderQty.ToString() } });
        row.Entries.Add(new RowEntry { Column = "ProductID", Value = new Value { StringValue = entity.ProductId.ToString() } });
        row.Entries.Add(new RowEntry { Column = "UnitPrice", Value = new Value { StringValue = entity.UnitPrice.ToString() } });
        row.Entries.Add(new RowEntry { Column = "UnitPriceDiscount", Value = new Value { StringValue = entity.UnitPriceDiscount.ToString() } });
        row.Entries.Add(new RowEntry { Column = "LineTotal", Value = new Value { StringValue = entity.LineTotal.ToString() } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.ModifiedDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "ModifiedDate", Value = new Value { StringValue = entity.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
