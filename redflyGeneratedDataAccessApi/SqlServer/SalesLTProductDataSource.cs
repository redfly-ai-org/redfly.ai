using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Protos.SqlServer;

namespace redflyGeneratedDataAccessApi.SqlServer;

// Strongly-typed classes for [SalesLT].[Product] generated by the
// redfly SqlServerGrpcPolyLangCompiler on 05/24/25 12:26:29 AM
// This is only meant to be indicative of the features available in the core product.
public class SalesLTProduct : TableEntityBase
{
    public int ProductId { get; set; }
    public string Name { get; set; } = string.Empty;
    public string ProductNumber { get; set; } = string.Empty;
    public string? Color { get; set; }
    public decimal StandardCost { get; set; }
    public decimal ListPrice { get; set; }
    public string? Size { get; set; }
    public decimal? Weight { get; set; }
    public int? ProductCategoryId { get; set; }
    public int? ProductModelId { get; set; }
    public DateTime SellStartDate { get; set; }
    public DateTime? SellEndDate { get; set; }
    public DateTime? DiscontinuedDate { get; set; }
    public byte[]? ThumbNailPhoto { get; set; }
    public string? ThumbnailPhotoFileName { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime ModifiedDate { get; set; }
}

public class SalesLTProductRowsData : BaseTableRowsData
{
    public List<SalesLTProduct> Rows { get; set; } = new();
}
public class SalesLTProductInsertedData : BaseTableInsertedData
{
    public SalesLTProduct? InsertedRow { get; set; }
}
public class SalesLTProductRowData : BaseTableRowData
{
    public SalesLTProduct? Row { get; set; }
}

public class SalesLTProductDataSource : TableDataSourceBase<SalesLTProduct>
{
    public SalesLTProductDataSource() : base()
    {
    }

    public async Task<DeletedData> DeleteAsync(int productId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("ProductID", productId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesLTProductRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesLTProduct>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesLTProductRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesLTProductInsertedData> InsertAsync(SalesLTProduct entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesLTProductInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesLTProductRowData> GetAsync(int productId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("ProductID", productId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesLTProductRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesLTProduct entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesLTProduct MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesLTProduct
        {
            ProductId = dict.TryGetValue("ProductID", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,

            Name = dict.TryGetValue("Name", out var v2) ? v2 ?? string.Empty : string.Empty,

            ProductNumber = dict.TryGetValue("ProductNumber", out var v3) ? v3 ?? string.Empty : string.Empty,

            Color = dict.TryGetValue("Color", out var v4) ? v4 : null,

            StandardCost = dict.TryGetValue("StandardCost", out var v5) && decimal.TryParse(v5, out var d5) ? d5 : 0m,

            ListPrice = dict.TryGetValue("ListPrice", out var v6) && decimal.TryParse(v6, out var d6) ? d6 : 0m,

            Size = dict.TryGetValue("Size", out var v7) ? v7 : null,

            Weight = dict.TryGetValue("Weight", out var v8) && !string.IsNullOrEmpty(v8) ? (decimal)Convert.ChangeType(v8, typeof(decimal)) : null,

            ProductCategoryId = dict.TryGetValue("ProductCategoryID", out var v9) && !string.IsNullOrEmpty(v9) ? (int)Convert.ChangeType(v9, typeof(int)) : null,

            ProductModelId = dict.TryGetValue("ProductModelID", out var v10) && !string.IsNullOrEmpty(v10) ? (int)Convert.ChangeType(v10, typeof(int)) : null,

            SellStartDate = dict.TryGetValue("SellStartDate", out var v11) && DateTime.TryParse(v11, out var d11) ? d11 : DateTime.MinValue,

            SellEndDate = dict.TryGetValue("SellEndDate", out var v12) && !string.IsNullOrEmpty(v12) ? (DateTime)Convert.ChangeType(v12, typeof(DateTime)) : null,

            DiscontinuedDate = dict.TryGetValue("DiscontinuedDate", out var v13) && !string.IsNullOrEmpty(v13) ? (DateTime)Convert.ChangeType(v13, typeof(DateTime)) : null,

            ThumbNailPhoto = dict.TryGetValue("ThumbNailPhoto", out var v14) ? Convert.FromBase64String(v14 ?? "") : Array.Empty<byte>(),

            ThumbnailPhotoFileName = dict.TryGetValue("ThumbnailPhotoFileName", out var v15) ? v15 : null,

            Rowguid = dict.TryGetValue("rowguid", out var v16) && Guid.TryParse(v16, out var g16) ? g16 : Guid.Empty,

            ModifiedDate = dict.TryGetValue("ModifiedDate", out var v17) && DateTime.TryParse(v17, out var d17) ? d17 : DateTime.MinValue,

            Version = dict.TryGetValue("Version", out var vVersion) ? Convert.FromBase64String(vVersion ?? "") : Array.Empty<byte>(),

        };
    }

    protected override Row MapTableEntityToRow(SalesLTProduct entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "ProductID", Value = new Value { StringValue = entity.ProductId.ToString() } });
        }
        row.Entries.Add(new RowEntry { Column = "Name", Value = new Value { StringValue = entity.Name } });
        row.Entries.Add(new RowEntry { Column = "ProductNumber", Value = new Value { StringValue = entity.ProductNumber } });
        row.Entries.Add(new RowEntry { Column = "Color", Value = new Value { StringValue = entity.Color } });
        row.Entries.Add(new RowEntry { Column = "StandardCost", Value = new Value { StringValue = entity.StandardCost.ToString() } });
        row.Entries.Add(new RowEntry { Column = "ListPrice", Value = new Value { StringValue = entity.ListPrice.ToString() } });
        row.Entries.Add(new RowEntry { Column = "Size", Value = new Value { StringValue = entity.Size } });
        row.Entries.Add(new RowEntry { Column = "Weight", Value = new Value { StringValue = entity.Weight != null ? entity.Weight.ToString() : null } });
        row.Entries.Add(new RowEntry { Column = "ProductCategoryID", Value = new Value { StringValue = entity.ProductCategoryId != null ? entity.ProductCategoryId.ToString() : null } });
        row.Entries.Add(new RowEntry { Column = "ProductModelID", Value = new Value { StringValue = entity.ProductModelId != null ? entity.ProductModelId.ToString() : null } });
        if (entity.SellStartDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "SellStartDate", Value = new Value { StringValue = entity.SellStartDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        if (entity.SellEndDate != null)
        {
            row.Entries.Add(new RowEntry { Column = "SellEndDate", Value = new Value { StringValue = entity.SellEndDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        if (entity.DiscontinuedDate != null)
        {
            row.Entries.Add(new RowEntry { Column = "DiscontinuedDate", Value = new Value { StringValue = entity.DiscontinuedDate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        row.Entries.Add(new RowEntry { Column = "ThumbNailPhoto", Value = new Value { StringValue = entity.ThumbNailPhoto != null ? Convert.ToBase64String(entity.ThumbNailPhoto) : null } });
        row.Entries.Add(new RowEntry { Column = "ThumbnailPhotoFileName", Value = new Value { StringValue = entity.ThumbnailPhotoFileName } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.ModifiedDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "ModifiedDate", Value = new Value { StringValue = entity.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
