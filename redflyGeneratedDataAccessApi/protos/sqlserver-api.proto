syntax = "proto3";
import "Protos/database-api.proto";

option csharp_namespace = "redflyGeneratedDataAccessApi.Protos.SqlServer";

package databaseapi;

// Request for GetTotalRowCount.
message GetTotalRowCountRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
}

// Request for Delete.
message DeleteRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  map<string, string> primary_key_values = 9; // key: PK column name, value: PK value
  bool modify_cache = 10;
}

// Request for GetRows.
message GetRowsRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  int32 page_no = 9;
  int32 page_size = 10;
  string orderby_column_name = 11;
  string orderby_column_sort = 12; // "asc" or "desc"
}

// Request for GetSqlRows.
message GetSqlRowsRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryptedSqlQuery = 8;
  string encryption_key = 9;
}

// Request for Insert.
message InsertRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  Row row = 9;
  bool modify_cache = 10;
}

// Request for Get.
message GetRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  map<string, string> primary_key_values = 9; // key: PK column name, value: PK value
}

// Request for Update.
message UpdateRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  Row row = 9;
  bool modify_cache = 10;
}

// The generic SQL Server API service.
service NativeGrpcSqlServerApiService {
  rpc GetTotalRowCount(GetTotalRowCountRequest) returns (GetTotalRowCountResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc GetRows(GetRowsRequest) returns (GetRowsResponse);
  rpc GetSqlRows(GetSqlRowsRequest) returns (GetRowsResponse);
  rpc Insert(InsertRequest) returns (InsertResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
}