using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [sales].[salesorderheader] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:21:28 PM
// This is only meant to be indicative of the features available in the core product.

public class SalesSalesorderheader : BasePostgresTableSchema
{
    public int Salesorderid { get; set; }
    public short Revisionnumber { get; set; }
    public DateTime Orderdate { get; set; }
    public DateTime Duedate { get; set; }
    public DateTime? Shipdate { get; set; }
    public short Status { get; set; }
    public bool Onlineorderflag { get; set; }
    public string? Purchaseordernumber { get; set; }
    public string? Accountnumber { get; set; }
    public int Customerid { get; set; }
    public int? Salespersonid { get; set; }
    public int? Territoryid { get; set; }
    public int Billtoaddressid { get; set; }
    public int Shiptoaddressid { get; set; }
    public int Shipmethodid { get; set; }
    public int? Creditcardid { get; set; }
    public string? Creditcardapprovalcode { get; set; }
    public int? Currencyrateid { get; set; }
    public decimal Subtotal { get; set; }
    public decimal Taxamt { get; set; }
    public decimal Freight { get; set; }
    public decimal? Totaldue { get; set; }
    public string? Comment { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class SalesSalesorderheaderRowsData : BaseTableRowsData
{
    public List<SalesSalesorderheader> Rows { get; set; } = new();
}

public class SalesSalesorderheaderInsertedData : BaseTableInsertedData
{
    public SalesSalesorderheader? InsertedRow { get; set; }
}

public class SalesSalesorderheaderRowData : BaseTableRowData
{
    public SalesSalesorderheader? Row { get; set; }
}

public class SalesSalesorderheaderDataSource : BasePostgresTableDataSource<SalesSalesorderheader>
{
    public SalesSalesorderheaderDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("sales");
        _encTable = RedflyEncryption.EncryptToString("salesorderheader");
    }

    public async Task<DeletedData> DeleteAsync(int salesorderid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("salesorderid", salesorderid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesSalesorderheaderRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesSalesorderheader>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesSalesorderheaderRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesSalesorderheaderInsertedData> InsertAsync(SalesSalesorderheader entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesSalesorderheaderInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesSalesorderheaderRowData> GetAsync(int salesorderid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("salesorderid", salesorderid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesSalesorderheaderRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesSalesorderheader entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesSalesorderheader MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesSalesorderheader
        {
            Salesorderid = dict.TryGetValue("salesorderid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Revisionnumber = dict.TryGetValue("revisionnumber", out var v2) && !string.IsNullOrEmpty(v2) ? (short)Convert.ChangeType(v2, typeof(short)) : default(short),
            Orderdate = dict.TryGetValue("orderdate", out var v3) && !string.IsNullOrEmpty(v3) ? (DateTime)Convert.ChangeType(v3, typeof(DateTime)) : default(DateTime),
            Duedate = dict.TryGetValue("duedate", out var v4) && !string.IsNullOrEmpty(v4) ? (DateTime)Convert.ChangeType(v4, typeof(DateTime)) : default(DateTime),
            Shipdate = dict.TryGetValue("shipdate", out var v5) && !string.IsNullOrEmpty(v5) ? (DateTime)Convert.ChangeType(v5, typeof(DateTime)) : null,
            Status = dict.TryGetValue("status", out var v6) && !string.IsNullOrEmpty(v6) ? (short)Convert.ChangeType(v6, typeof(short)) : default(short),
            Onlineorderflag = dict.TryGetValue("onlineorderflag", out var v7) && !string.IsNullOrEmpty(v7) ? (bool)Convert.ChangeType(v7, typeof(bool)) : default(bool),
            Purchaseordernumber = dict.TryGetValue("purchaseordernumber", out var v8) && !string.IsNullOrEmpty(v8) ? (string)Convert.ChangeType(v8, typeof(string)) : null,
            Accountnumber = dict.TryGetValue("accountnumber", out var v9) && !string.IsNullOrEmpty(v9) ? (string)Convert.ChangeType(v9, typeof(string)) : null,
            Customerid = dict.TryGetValue("customerid", out var v10) && !string.IsNullOrEmpty(v10) ? (int)Convert.ChangeType(v10, typeof(int)) : default(int),
            Salespersonid = dict.TryGetValue("salespersonid", out var v11) && !string.IsNullOrEmpty(v11) ? (int)Convert.ChangeType(v11, typeof(int)) : null,
            Territoryid = dict.TryGetValue("territoryid", out var v12) && !string.IsNullOrEmpty(v12) ? (int)Convert.ChangeType(v12, typeof(int)) : null,
            Billtoaddressid = dict.TryGetValue("billtoaddressid", out var v13) && !string.IsNullOrEmpty(v13) ? (int)Convert.ChangeType(v13, typeof(int)) : default(int),
            Shiptoaddressid = dict.TryGetValue("shiptoaddressid", out var v14) && !string.IsNullOrEmpty(v14) ? (int)Convert.ChangeType(v14, typeof(int)) : default(int),
            Shipmethodid = dict.TryGetValue("shipmethodid", out var v15) && !string.IsNullOrEmpty(v15) ? (int)Convert.ChangeType(v15, typeof(int)) : default(int),
            Creditcardid = dict.TryGetValue("creditcardid", out var v16) && !string.IsNullOrEmpty(v16) ? (int)Convert.ChangeType(v16, typeof(int)) : null,
            Creditcardapprovalcode = dict.TryGetValue("creditcardapprovalcode", out var v17) && !string.IsNullOrEmpty(v17) ? (string)Convert.ChangeType(v17, typeof(string)) : null,
            Currencyrateid = dict.TryGetValue("currencyrateid", out var v18) && !string.IsNullOrEmpty(v18) ? (int)Convert.ChangeType(v18, typeof(int)) : null,
            Subtotal = dict.TryGetValue("subtotal", out var v19) && !string.IsNullOrEmpty(v19) ? (decimal)Convert.ChangeType(v19, typeof(decimal)) : default(decimal),
            Taxamt = dict.TryGetValue("taxamt", out var v20) && !string.IsNullOrEmpty(v20) ? (decimal)Convert.ChangeType(v20, typeof(decimal)) : default(decimal),
            Freight = dict.TryGetValue("freight", out var v21) && !string.IsNullOrEmpty(v21) ? (decimal)Convert.ChangeType(v21, typeof(decimal)) : default(decimal),
            Totaldue = dict.TryGetValue("totaldue", out var v22) && !string.IsNullOrEmpty(v22) ? (decimal)Convert.ChangeType(v22, typeof(decimal)) : null,
            Comment = dict.TryGetValue("comment", out var v23) && !string.IsNullOrEmpty(v23) ? (string)Convert.ChangeType(v23, typeof(string)) : null,
            Rowguid = dict.TryGetValue("rowguid", out var v24) && !string.IsNullOrEmpty(v24) ? (Guid)Convert.ChangeType(v24, typeof(Guid)) : default(Guid),
            Modifieddate = dict.TryGetValue("modifieddate", out var v25) && !string.IsNullOrEmpty(v25) ? (DateTime)Convert.ChangeType(v25, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(SalesSalesorderheader entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "salesorderid", Value = new Value { StringValue = entity.Salesorderid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "revisionnumber", Value = new Value { StringValue = entity.Revisionnumber.ToString() } });
        row.Entries.Add(new RowEntry { Column = "orderdate", Value = new Value { StringValue = entity.Orderdate.ToString() } });
        row.Entries.Add(new RowEntry { Column = "duedate", Value = new Value { StringValue = entity.Duedate.ToString() } });
        if (entity.Shipdate != null)
        {
            row.Entries.Add(new RowEntry { Column = "shipdate", Value = new Value { StringValue = entity.Shipdate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "shipdate", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "status", Value = new Value { StringValue = entity.Status.ToString() } });
        row.Entries.Add(new RowEntry { Column = "onlineorderflag", Value = new Value { StringValue = entity.Onlineorderflag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "purchaseordernumber", Value = new Value { StringValue = entity.Purchaseordernumber } });
        row.Entries.Add(new RowEntry { Column = "accountnumber", Value = new Value { StringValue = entity.Accountnumber } });
        row.Entries.Add(new RowEntry { Column = "customerid", Value = new Value { StringValue = entity.Customerid.ToString() } });
        if (entity.Salespersonid != null)
        {
            row.Entries.Add(new RowEntry { Column = "salespersonid", Value = new Value { StringValue = entity.Salespersonid.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "salespersonid", Value = new Value { StringValue = null } });
        }
        if (entity.Territoryid != null)
        {
            row.Entries.Add(new RowEntry { Column = "territoryid", Value = new Value { StringValue = entity.Territoryid.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "territoryid", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "billtoaddressid", Value = new Value { StringValue = entity.Billtoaddressid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "shiptoaddressid", Value = new Value { StringValue = entity.Shiptoaddressid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "shipmethodid", Value = new Value { StringValue = entity.Shipmethodid.ToString() } });
        if (entity.Creditcardid != null)
        {
            row.Entries.Add(new RowEntry { Column = "creditcardid", Value = new Value { StringValue = entity.Creditcardid.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "creditcardid", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "creditcardapprovalcode", Value = new Value { StringValue = entity.Creditcardapprovalcode } });
        if (entity.Currencyrateid != null)
        {
            row.Entries.Add(new RowEntry { Column = "currencyrateid", Value = new Value { StringValue = entity.Currencyrateid.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "currencyrateid", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "subtotal", Value = new Value { StringValue = entity.Subtotal.ToString() } });
        row.Entries.Add(new RowEntry { Column = "taxamt", Value = new Value { StringValue = entity.Taxamt.ToString() } });
        row.Entries.Add(new RowEntry { Column = "freight", Value = new Value { StringValue = entity.Freight.ToString() } });
        if (entity.Totaldue != null)
        {
            row.Entries.Add(new RowEntry { Column = "totaldue", Value = new Value { StringValue = entity.Totaldue.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "totaldue", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "comment", Value = new Value { StringValue = entity.Comment } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
