using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [purchasing].[purchaseorderdetail] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:28:19 PM
// This is only meant to be indicative of the features available in the core product.

public class PurchasingPurchaseorderdetail : BasePostgresTableSchema
{
    public int Purchaseorderid { get; set; }
    public int Purchaseorderdetailid { get; set; }
    public DateTime Duedate { get; set; }
    public short Orderqty { get; set; }
    public int Productid { get; set; }
    public decimal Unitprice { get; set; }
    public decimal Receivedqty { get; set; }
    public decimal Rejectedqty { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class PurchasingPurchaseorderdetailRowsData : BaseTableRowsData
{
    public List<PurchasingPurchaseorderdetail> Rows { get; set; } = new();
}

public class PurchasingPurchaseorderdetailInsertedData : BaseTableInsertedData
{
    public PurchasingPurchaseorderdetail? InsertedRow { get; set; }
}

public class PurchasingPurchaseorderdetailRowData : BaseTableRowData
{
    public PurchasingPurchaseorderdetail? Row { get; set; }
}

public class PurchasingPurchaseorderdetailDataSource : BasePostgresTableDataSource<PurchasingPurchaseorderdetail>
{
    public PurchasingPurchaseorderdetailDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("purchasing");
        _encTable = RedflyEncryption.EncryptToString("purchaseorderdetail");
    }

    public async Task<DeletedData> DeleteAsync(int purchaseorderid, int purchaseorderdetailid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("purchaseorderid", purchaseorderid.ToString());
        req.PrimaryKeyValues.Add("purchaseorderdetailid", purchaseorderdetailid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<PurchasingPurchaseorderdetailRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<PurchasingPurchaseorderdetail>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new PurchasingPurchaseorderdetailRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<PurchasingPurchaseorderdetailInsertedData> InsertAsync(PurchasingPurchaseorderdetail entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new PurchasingPurchaseorderdetailInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<PurchasingPurchaseorderdetailRowData> GetAsync(int purchaseorderid, int purchaseorderdetailid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("purchaseorderid", purchaseorderid.ToString());
        req.PrimaryKeyValues.Add("purchaseorderdetailid", purchaseorderdetailid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new PurchasingPurchaseorderdetailRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(PurchasingPurchaseorderdetail entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override PurchasingPurchaseorderdetail MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new PurchasingPurchaseorderdetail
        {
            Purchaseorderid = dict.TryGetValue("purchaseorderid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Purchaseorderdetailid = dict.TryGetValue("purchaseorderdetailid", out var v2) && !string.IsNullOrEmpty(v2) ? (int)Convert.ChangeType(v2, typeof(int)) : default(int),
            Duedate = dict.TryGetValue("duedate", out var v3) && !string.IsNullOrEmpty(v3) ? (DateTime)Convert.ChangeType(v3, typeof(DateTime)) : default(DateTime),
            Orderqty = dict.TryGetValue("orderqty", out var v4) && !string.IsNullOrEmpty(v4) ? (short)Convert.ChangeType(v4, typeof(short)) : default(short),
            Productid = dict.TryGetValue("productid", out var v5) && !string.IsNullOrEmpty(v5) ? (int)Convert.ChangeType(v5, typeof(int)) : default(int),
            Unitprice = dict.TryGetValue("unitprice", out var v6) && !string.IsNullOrEmpty(v6) ? (decimal)Convert.ChangeType(v6, typeof(decimal)) : default(decimal),
            Receivedqty = dict.TryGetValue("receivedqty", out var v7) && !string.IsNullOrEmpty(v7) ? (decimal)Convert.ChangeType(v7, typeof(decimal)) : default(decimal),
            Rejectedqty = dict.TryGetValue("rejectedqty", out var v8) && !string.IsNullOrEmpty(v8) ? (decimal)Convert.ChangeType(v8, typeof(decimal)) : default(decimal),
            Modifieddate = dict.TryGetValue("modifieddate", out var v9) && !string.IsNullOrEmpty(v9) ? (DateTime)Convert.ChangeType(v9, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(PurchasingPurchaseorderdetail entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "purchaseorderid", Value = new Value { StringValue = entity.Purchaseorderid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "purchaseorderdetailid", Value = new Value { StringValue = entity.Purchaseorderdetailid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "duedate", Value = new Value { StringValue = entity.Duedate.ToString() } });
        row.Entries.Add(new RowEntry { Column = "orderqty", Value = new Value { StringValue = entity.Orderqty.ToString() } });
        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "unitprice", Value = new Value { StringValue = entity.Unitprice.ToString() } });
        row.Entries.Add(new RowEntry { Column = "receivedqty", Value = new Value { StringValue = entity.Receivedqty.ToString() } });
        row.Entries.Add(new RowEntry { Column = "rejectedqty", Value = new Value { StringValue = entity.Rejectedqty.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
