using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [production].[productmodelillustration] generated by the
// redfly PostgresGrpcPolyLangCompiler
// This is only meant to be indicative of the features available in the core product.

public class ProductionProductmodelillustration : BasePostgresTableSchema
{
    public int Productmodelid { get; set; }
    public int Illustrationid { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class ProductionProductmodelillustrationRowsData : BaseTableRowsData
{
    public List<ProductionProductmodelillustration> Rows { get; set; } = new();
}

public class ProductionProductmodelillustrationInsertedData : BaseTableInsertedData
{
    public ProductionProductmodelillustration? InsertedRow { get; set; }
}

public class ProductionProductmodelillustrationRowData : BaseTableRowData
{
    public ProductionProductmodelillustration? Row { get; set; }
}

public class ProductionProductmodelillustrationDataSource : BasePostgresTableDataSource<ProductionProductmodelillustration>
{
    public ProductionProductmodelillustrationDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("production");
        _encTable = RedflyEncryption.EncryptToString("productmodelillustration");
    }

    public async Task<DeletedData> DeleteAsync(int productmodelid, int illustrationid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("productmodelid", productmodelid.ToString());
        req.PrimaryKeyValues.Add("illustrationid", illustrationid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ProductionProductmodelillustrationRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ProductionProductmodelillustration>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ProductionProductmodelillustrationRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductmodelillustrationInsertedData> InsertAsync(ProductionProductmodelillustration entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductmodelillustrationInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductmodelillustrationRowData> GetAsync(int productmodelid, int illustrationid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("productmodelid", productmodelid.ToString());
        req.PrimaryKeyValues.Add("illustrationid", illustrationid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductmodelillustrationRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ProductionProductmodelillustration entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ProductionProductmodelillustration MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ProductionProductmodelillustration
        {
            Productmodelid = dict.TryGetValue("productmodelid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Illustrationid = dict.TryGetValue("illustrationid", out var v2) && !string.IsNullOrEmpty(v2) ? (int)Convert.ChangeType(v2, typeof(int)) : default(int),
            Modifieddate = dict.TryGetValue("modifieddate", out var v3) && !string.IsNullOrEmpty(v3) ? (DateTime)Convert.ChangeType(v3, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(ProductionProductmodelillustration entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "productmodelid", Value = new Value { StringValue = entity.Productmodelid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "illustrationid", Value = new Value { StringValue = entity.Illustrationid.ToString() } });

        // For Postgres, add all non-primary key columns
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
