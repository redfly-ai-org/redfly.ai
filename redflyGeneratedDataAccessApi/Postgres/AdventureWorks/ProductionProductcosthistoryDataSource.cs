using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [production].[productcosthistory] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:28:18 PM
// This is only meant to be indicative of the features available in the core product.

public class ProductionProductcosthistory : BasePostgresTableSchema
{
    public int Productid { get; set; }
    public DateTime Startdate { get; set; }
    public DateTime? Enddate { get; set; }
    public decimal Standardcost { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class ProductionProductcosthistoryRowsData : BaseTableRowsData
{
    public List<ProductionProductcosthistory> Rows { get; set; } = new();
}

public class ProductionProductcosthistoryInsertedData : BaseTableInsertedData
{
    public ProductionProductcosthistory? InsertedRow { get; set; }
}

public class ProductionProductcosthistoryRowData : BaseTableRowData
{
    public ProductionProductcosthistory? Row { get; set; }
}

public class ProductionProductcosthistoryDataSource : BasePostgresTableDataSource<ProductionProductcosthistory>
{
    public ProductionProductcosthistoryDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("production");
        _encTable = RedflyEncryption.EncryptToString("productcosthistory");
    }

    public async Task<DeletedData> DeleteAsync(int productid, DateTime startdate, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        req.PrimaryKeyValues.Add("startdate", startdate.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ProductionProductcosthistoryRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ProductionProductcosthistory>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ProductionProductcosthistoryRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductcosthistoryInsertedData> InsertAsync(ProductionProductcosthistory entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductcosthistoryInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductcosthistoryRowData> GetAsync(int productid, DateTime startdate, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        req.PrimaryKeyValues.Add("startdate", startdate.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductcosthistoryRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ProductionProductcosthistory entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ProductionProductcosthistory MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ProductionProductcosthistory
        {
            Productid = dict.TryGetValue("productid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Startdate = dict.TryGetValue("startdate", out var v2) && !string.IsNullOrEmpty(v2) ? (DateTime)Convert.ChangeType(v2, typeof(DateTime)) : default(DateTime),
            Enddate = dict.TryGetValue("enddate", out var v3) && !string.IsNullOrEmpty(v3) ? (DateTime)Convert.ChangeType(v3, typeof(DateTime)) : null,
            Standardcost = dict.TryGetValue("standardcost", out var v4) && !string.IsNullOrEmpty(v4) ? (decimal)Convert.ChangeType(v4, typeof(decimal)) : default(decimal),
            Modifieddate = dict.TryGetValue("modifieddate", out var v5) && !string.IsNullOrEmpty(v5) ? (DateTime)Convert.ChangeType(v5, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(ProductionProductcosthistory entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "startdate", Value = new Value { StringValue = entity.Startdate.ToString() } });

        // For Postgres, add all non-primary key columns
        if (entity.Enddate != null)
        {
            row.Entries.Add(new RowEntry { Column = "enddate", Value = new Value { StringValue = entity.Enddate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "enddate", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "standardcost", Value = new Value { StringValue = entity.Standardcost.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
