using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [purchasing].[purchaseorderheader] generated by the
// redfly PostgresGrpcPolyLangCompiler
// This is only meant to be indicative of the features available in the core product.

public class PurchasingPurchaseorderheader : BasePostgresTableSchema
{
    public int Purchaseorderid { get; set; }
    public short Revisionnumber { get; set; }
    public short Status { get; set; }
    public int Employeeid { get; set; }
    public int Vendorid { get; set; }
    public int Shipmethodid { get; set; }
    public DateTime Orderdate { get; set; }
    public DateTime? Shipdate { get; set; }
    public decimal Subtotal { get; set; }
    public decimal Taxamt { get; set; }
    public decimal Freight { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class PurchasingPurchaseorderheaderRowsData : BaseTableRowsData
{
    public List<PurchasingPurchaseorderheader> Rows { get; set; } = new();
}

public class PurchasingPurchaseorderheaderInsertedData : BaseTableInsertedData
{
    public PurchasingPurchaseorderheader? InsertedRow { get; set; }
}

public class PurchasingPurchaseorderheaderRowData : BaseTableRowData
{
    public PurchasingPurchaseorderheader? Row { get; set; }
}

public class PurchasingPurchaseorderheaderDataSource : BasePostgresTableDataSource<PurchasingPurchaseorderheader>
{
    public PurchasingPurchaseorderheaderDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("purchasing");
        _encTable = RedflyEncryption.EncryptToString("purchaseorderheader");
    }

    public async Task<DeletedData> DeleteAsync(int purchaseorderid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("purchaseorderid", purchaseorderid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<PurchasingPurchaseorderheaderRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<PurchasingPurchaseorderheader>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new PurchasingPurchaseorderheaderRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<PurchasingPurchaseorderheaderInsertedData> InsertAsync(PurchasingPurchaseorderheader entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new PurchasingPurchaseorderheaderInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<PurchasingPurchaseorderheaderRowData> GetAsync(int purchaseorderid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("purchaseorderid", purchaseorderid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new PurchasingPurchaseorderheaderRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(PurchasingPurchaseorderheader entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override PurchasingPurchaseorderheader MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new PurchasingPurchaseorderheader
        {
            Purchaseorderid = dict.TryGetValue("purchaseorderid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Revisionnumber = dict.TryGetValue("revisionnumber", out var v2) && !string.IsNullOrEmpty(v2) ? (short)Convert.ChangeType(v2, typeof(short)) : default(short),
            Status = dict.TryGetValue("status", out var v3) && !string.IsNullOrEmpty(v3) ? (short)Convert.ChangeType(v3, typeof(short)) : default(short),
            Employeeid = dict.TryGetValue("employeeid", out var v4) && !string.IsNullOrEmpty(v4) ? (int)Convert.ChangeType(v4, typeof(int)) : default(int),
            Vendorid = dict.TryGetValue("vendorid", out var v5) && !string.IsNullOrEmpty(v5) ? (int)Convert.ChangeType(v5, typeof(int)) : default(int),
            Shipmethodid = dict.TryGetValue("shipmethodid", out var v6) && !string.IsNullOrEmpty(v6) ? (int)Convert.ChangeType(v6, typeof(int)) : default(int),
            Orderdate = dict.TryGetValue("orderdate", out var v7) && !string.IsNullOrEmpty(v7) ? (DateTime)Convert.ChangeType(v7, typeof(DateTime)) : default(DateTime),
            Shipdate = dict.TryGetValue("shipdate", out var v8) && !string.IsNullOrEmpty(v8) ? (DateTime)Convert.ChangeType(v8, typeof(DateTime)) : null,
            Subtotal = dict.TryGetValue("subtotal", out var v9) && !string.IsNullOrEmpty(v9) ? (decimal)Convert.ChangeType(v9, typeof(decimal)) : default(decimal),
            Taxamt = dict.TryGetValue("taxamt", out var v10) && !string.IsNullOrEmpty(v10) ? (decimal)Convert.ChangeType(v10, typeof(decimal)) : default(decimal),
            Freight = dict.TryGetValue("freight", out var v11) && !string.IsNullOrEmpty(v11) ? (decimal)Convert.ChangeType(v11, typeof(decimal)) : default(decimal),
            Modifieddate = dict.TryGetValue("modifieddate", out var v12) && !string.IsNullOrEmpty(v12) ? (DateTime)Convert.ChangeType(v12, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(PurchasingPurchaseorderheader entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "purchaseorderid", Value = new Value { StringValue = entity.Purchaseorderid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "revisionnumber", Value = new Value { StringValue = entity.Revisionnumber.ToString() } });
        row.Entries.Add(new RowEntry { Column = "status", Value = new Value { StringValue = entity.Status.ToString() } });
        row.Entries.Add(new RowEntry { Column = "employeeid", Value = new Value { StringValue = entity.Employeeid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "vendorid", Value = new Value { StringValue = entity.Vendorid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "shipmethodid", Value = new Value { StringValue = entity.Shipmethodid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "orderdate", Value = new Value { StringValue = entity.Orderdate.ToString() } });
        if (entity.Shipdate != null)
        {
            row.Entries.Add(new RowEntry { Column = "shipdate", Value = new Value { StringValue = entity.Shipdate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "shipdate", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "subtotal", Value = new Value { StringValue = entity.Subtotal.ToString() } });
        row.Entries.Add(new RowEntry { Column = "taxamt", Value = new Value { StringValue = entity.Taxamt.ToString() } });
        row.Entries.Add(new RowEntry { Column = "freight", Value = new Value { StringValue = entity.Freight.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
