using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [production].[productreview] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:28:18 PM
// This is only meant to be indicative of the features available in the core product.

public class ProductionProductreview : BasePostgresTableSchema
{
    public int Productreviewid { get; set; }
    public int Productid { get; set; }
    public string Reviewername { get; set; } = string.Empty;
    public DateTime Reviewdate { get; set; }
    public string Emailaddress { get; set; } = string.Empty;
    public int Rating { get; set; }
    public string? Comments { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class ProductionProductreviewRowsData : BaseTableRowsData
{
    public List<ProductionProductreview> Rows { get; set; } = new();
}

public class ProductionProductreviewInsertedData : BaseTableInsertedData
{
    public ProductionProductreview? InsertedRow { get; set; }
}

public class ProductionProductreviewRowData : BaseTableRowData
{
    public ProductionProductreview? Row { get; set; }
}

public class ProductionProductreviewDataSource : BasePostgresTableDataSource<ProductionProductreview>
{
    public ProductionProductreviewDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("production");
        _encTable = RedflyEncryption.EncryptToString("productreview");
    }

    public async Task<DeletedData> DeleteAsync(int productreviewid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("productreviewid", productreviewid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ProductionProductreviewRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ProductionProductreview>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ProductionProductreviewRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductreviewInsertedData> InsertAsync(ProductionProductreview entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductreviewInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductreviewRowData> GetAsync(int productreviewid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("productreviewid", productreviewid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductreviewRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ProductionProductreview entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ProductionProductreview MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ProductionProductreview
        {
            Productreviewid = dict.TryGetValue("productreviewid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Productid = dict.TryGetValue("productid", out var v2) && !string.IsNullOrEmpty(v2) ? (int)Convert.ChangeType(v2, typeof(int)) : default(int),
            Reviewername = dict.TryGetValue("reviewername", out var v3) && !string.IsNullOrEmpty(v3) ? (string)Convert.ChangeType(v3, typeof(string)) : default(string),
            Reviewdate = dict.TryGetValue("reviewdate", out var v4) && !string.IsNullOrEmpty(v4) ? (DateTime)Convert.ChangeType(v4, typeof(DateTime)) : default(DateTime),
            Emailaddress = dict.TryGetValue("emailaddress", out var v5) && !string.IsNullOrEmpty(v5) ? (string)Convert.ChangeType(v5, typeof(string)) : default(string),
            Rating = dict.TryGetValue("rating", out var v6) && !string.IsNullOrEmpty(v6) ? (int)Convert.ChangeType(v6, typeof(int)) : default(int),
            Comments = dict.TryGetValue("comments", out var v7) && !string.IsNullOrEmpty(v7) ? (string)Convert.ChangeType(v7, typeof(string)) : null,
            Modifieddate = dict.TryGetValue("modifieddate", out var v8) && !string.IsNullOrEmpty(v8) ? (DateTime)Convert.ChangeType(v8, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(ProductionProductreview entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "productreviewid", Value = new Value { StringValue = entity.Productreviewid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "reviewername", Value = new Value { StringValue = entity.Reviewername } });
        row.Entries.Add(new RowEntry { Column = "reviewdate", Value = new Value { StringValue = entity.Reviewdate.ToString() } });
        row.Entries.Add(new RowEntry { Column = "emailaddress", Value = new Value { StringValue = entity.Emailaddress } });
        row.Entries.Add(new RowEntry { Column = "rating", Value = new Value { StringValue = entity.Rating.ToString() } });
        row.Entries.Add(new RowEntry { Column = "comments", Value = new Value { StringValue = entity.Comments } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
