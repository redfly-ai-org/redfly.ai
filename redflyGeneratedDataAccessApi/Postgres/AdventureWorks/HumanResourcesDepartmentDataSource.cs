using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [humanresources].[department] generated by the
// redfly PostgresGrpcPolyLangCompiler on 05/24/25 10:39:40 PM
// This is only meant to be indicative of the features available in the core product.

public class HumanResourcesDepartment : BasePostgresTableSchema
{
    public int DepartmentId { get; set; }
    public string Name { get; set; } = string.Empty;
    public string GroupName { get; set; } = string.Empty;
    public DateTime ModifiedDate { get; set; }
}

public class HumanResourcesDepartmentRowsData : BaseTableRowsData
{
    public List<HumanResourcesDepartment> Rows { get; set; } = new();
}

public class HumanResourcesDepartmentInsertedData : BaseTableInsertedData
{
    public HumanResourcesDepartment? InsertedRow { get; set; }
}

public class HumanResourcesDepartmentRowData : BaseTableRowData
{
    public HumanResourcesDepartment? Row { get; set; }
}

public class HumanResourcesDepartmentDataSource : BasePostgresTableDataSource<HumanResourcesDepartment>
{
    public HumanResourcesDepartmentDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("humanresources");
        _encTable = RedflyEncryption.EncryptToString("department");
    }

    public async Task<DeletedData> DeleteAsync(int departmentId, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("departmentid", departmentId.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<HumanResourcesDepartmentRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<HumanResourcesDepartment>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new HumanResourcesDepartmentRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<HumanResourcesDepartmentInsertedData> InsertAsync(HumanResourcesDepartment entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new HumanResourcesDepartmentInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<HumanResourcesDepartmentRowData> GetAsync(int departmentId, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("departmentid", departmentId.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new HumanResourcesDepartmentRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(HumanResourcesDepartment entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override HumanResourcesDepartment MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new HumanResourcesDepartment
        {
            DepartmentId = dict.TryGetValue("departmentid", out var v1) && int.TryParse(v1, out var i1) ? i1 : 0,
            Name = dict.TryGetValue("name", out var v2) ? v2 ?? string.Empty : string.Empty,
            GroupName = dict.TryGetValue("groupname", out var v3) ? v3 ?? string.Empty : string.Empty,
            ModifiedDate = dict.TryGetValue("modifieddate", out var v4) && DateTime.TryParse(v4, out var d4) ? d4 : DateTime.MinValue
        };
    }

    protected override Row MapTableEntityToRow(HumanResourcesDepartment entity, DbOperationType dbOperationType)
    {
        var row = new Row();
        if (dbOperationType != DbOperationType.Insert)
        {
            row.Entries.Add(new RowEntry { Column = "departmentid", Value = new Value { StringValue = entity.DepartmentId.ToString() } });
        }
        row.Entries.Add(new RowEntry { Column = "name", Value = new Value { StringValue = entity.Name } });
        row.Entries.Add(new RowEntry { Column = "groupname", Value = new Value { StringValue = entity.GroupName } });
        if (entity.ModifiedDate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}