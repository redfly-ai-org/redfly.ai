using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [sales].[shoppingcartitem] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:28:20 PM
// This is only meant to be indicative of the features available in the core product.

public class SalesShoppingcartitem : BasePostgresTableSchema
{
    public int Shoppingcartitemid { get; set; }
    public string Shoppingcartid { get; set; } = string.Empty;
    public int Quantity { get; set; }
    public int Productid { get; set; }
    public DateTime Datecreated { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class SalesShoppingcartitemRowsData : BaseTableRowsData
{
    public List<SalesShoppingcartitem> Rows { get; set; } = new();
}

public class SalesShoppingcartitemInsertedData : BaseTableInsertedData
{
    public SalesShoppingcartitem? InsertedRow { get; set; }
}

public class SalesShoppingcartitemRowData : BaseTableRowData
{
    public SalesShoppingcartitem? Row { get; set; }
}

public class SalesShoppingcartitemDataSource : BasePostgresTableDataSource<SalesShoppingcartitem>
{
    public SalesShoppingcartitemDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("sales");
        _encTable = RedflyEncryption.EncryptToString("shoppingcartitem");
    }

    public async Task<DeletedData> DeleteAsync(int shoppingcartitemid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("shoppingcartitemid", shoppingcartitemid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<SalesShoppingcartitemRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<SalesShoppingcartitem>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new SalesShoppingcartitemRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<SalesShoppingcartitemInsertedData> InsertAsync(SalesShoppingcartitem entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new SalesShoppingcartitemInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<SalesShoppingcartitemRowData> GetAsync(int shoppingcartitemid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("shoppingcartitemid", shoppingcartitemid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new SalesShoppingcartitemRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(SalesShoppingcartitem entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override SalesShoppingcartitem MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new SalesShoppingcartitem
        {
            Shoppingcartitemid = dict.TryGetValue("shoppingcartitemid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Shoppingcartid = dict.TryGetValue("shoppingcartid", out var v2) && !string.IsNullOrEmpty(v2) ? (string)Convert.ChangeType(v2, typeof(string)) : default(string),
            Quantity = dict.TryGetValue("quantity", out var v3) && !string.IsNullOrEmpty(v3) ? (int)Convert.ChangeType(v3, typeof(int)) : default(int),
            Productid = dict.TryGetValue("productid", out var v4) && !string.IsNullOrEmpty(v4) ? (int)Convert.ChangeType(v4, typeof(int)) : default(int),
            Datecreated = dict.TryGetValue("datecreated", out var v5) && !string.IsNullOrEmpty(v5) ? (DateTime)Convert.ChangeType(v5, typeof(DateTime)) : default(DateTime),
            Modifieddate = dict.TryGetValue("modifieddate", out var v6) && !string.IsNullOrEmpty(v6) ? (DateTime)Convert.ChangeType(v6, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(SalesShoppingcartitem entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "shoppingcartitemid", Value = new Value { StringValue = entity.Shoppingcartitemid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "shoppingcartid", Value = new Value { StringValue = entity.Shoppingcartid } });
        row.Entries.Add(new RowEntry { Column = "quantity", Value = new Value { StringValue = entity.Quantity.ToString() } });
        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "datecreated", Value = new Value { StringValue = entity.Datecreated.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
