using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [production].[product] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:28:18 PM
// This is only meant to be indicative of the features available in the core product.

public class ProductionProduct : BasePostgresTableSchema
{
    public int Productid { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Productnumber { get; set; } = string.Empty;
    public bool Makeflag { get; set; }
    public bool Finishedgoodsflag { get; set; }
    public string? Color { get; set; }
    public short Safetystocklevel { get; set; }
    public short Reorderpoint { get; set; }
    public decimal Standardcost { get; set; }
    public decimal Listprice { get; set; }
    public string? Size { get; set; }
    public string? Sizeunitmeasurecode { get; set; }
    public string? Weightunitmeasurecode { get; set; }
    public decimal? Weight { get; set; }
    public int Daystomanufacture { get; set; }
    public string? Productline { get; set; }
    public string? Class { get; set; }
    public string? Style { get; set; }
    public int? Productsubcategoryid { get; set; }
    public int? Productmodelid { get; set; }
    public DateTime Sellstartdate { get; set; }
    public DateTime? Sellenddate { get; set; }
    public DateTime? Discontinueddate { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class ProductionProductRowsData : BaseTableRowsData
{
    public List<ProductionProduct> Rows { get; set; } = new();
}

public class ProductionProductInsertedData : BaseTableInsertedData
{
    public ProductionProduct? InsertedRow { get; set; }
}

public class ProductionProductRowData : BaseTableRowData
{
    public ProductionProduct? Row { get; set; }
}

public class ProductionProductDataSource : BasePostgresTableDataSource<ProductionProduct>
{
    public ProductionProductDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("production");
        _encTable = RedflyEncryption.EncryptToString("product");
    }

    public async Task<DeletedData> DeleteAsync(int productid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ProductionProductRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ProductionProduct>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ProductionProductRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductInsertedData> InsertAsync(ProductionProduct entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ProductionProductRowData> GetAsync(int productid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ProductionProductRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ProductionProduct entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ProductionProduct MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ProductionProduct
        {
            Productid = dict.TryGetValue("productid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Name = dict.TryGetValue("name", out var v2) && !string.IsNullOrEmpty(v2) ? (string)Convert.ChangeType(v2, typeof(string)) : default(string),
            Productnumber = dict.TryGetValue("productnumber", out var v3) && !string.IsNullOrEmpty(v3) ? (string)Convert.ChangeType(v3, typeof(string)) : default(string),
            Makeflag = dict.TryGetValue("makeflag", out var v4) && !string.IsNullOrEmpty(v4) ? (bool)Convert.ChangeType(v4, typeof(bool)) : default(bool),
            Finishedgoodsflag = dict.TryGetValue("finishedgoodsflag", out var v5) && !string.IsNullOrEmpty(v5) ? (bool)Convert.ChangeType(v5, typeof(bool)) : default(bool),
            Color = dict.TryGetValue("color", out var v6) && !string.IsNullOrEmpty(v6) ? (string)Convert.ChangeType(v6, typeof(string)) : null,
            Safetystocklevel = dict.TryGetValue("safetystocklevel", out var v7) && !string.IsNullOrEmpty(v7) ? (short)Convert.ChangeType(v7, typeof(short)) : default(short),
            Reorderpoint = dict.TryGetValue("reorderpoint", out var v8) && !string.IsNullOrEmpty(v8) ? (short)Convert.ChangeType(v8, typeof(short)) : default(short),
            Standardcost = dict.TryGetValue("standardcost", out var v9) && !string.IsNullOrEmpty(v9) ? (decimal)Convert.ChangeType(v9, typeof(decimal)) : default(decimal),
            Listprice = dict.TryGetValue("listprice", out var v10) && !string.IsNullOrEmpty(v10) ? (decimal)Convert.ChangeType(v10, typeof(decimal)) : default(decimal),
            Size = dict.TryGetValue("size", out var v11) && !string.IsNullOrEmpty(v11) ? (string)Convert.ChangeType(v11, typeof(string)) : null,
            Sizeunitmeasurecode = dict.TryGetValue("sizeunitmeasurecode", out var v12) && !string.IsNullOrEmpty(v12) ? (string)Convert.ChangeType(v12, typeof(string)) : null,
            Weightunitmeasurecode = dict.TryGetValue("weightunitmeasurecode", out var v13) && !string.IsNullOrEmpty(v13) ? (string)Convert.ChangeType(v13, typeof(string)) : null,
            Weight = dict.TryGetValue("weight", out var v14) && !string.IsNullOrEmpty(v14) ? (decimal)Convert.ChangeType(v14, typeof(decimal)) : null,
            Daystomanufacture = dict.TryGetValue("daystomanufacture", out var v15) && !string.IsNullOrEmpty(v15) ? (int)Convert.ChangeType(v15, typeof(int)) : default(int),
            Productline = dict.TryGetValue("productline", out var v16) && !string.IsNullOrEmpty(v16) ? (string)Convert.ChangeType(v16, typeof(string)) : null,
            Class = dict.TryGetValue("class", out var v17) && !string.IsNullOrEmpty(v17) ? (string)Convert.ChangeType(v17, typeof(string)) : null,
            Style = dict.TryGetValue("style", out var v18) && !string.IsNullOrEmpty(v18) ? (string)Convert.ChangeType(v18, typeof(string)) : null,
            Productsubcategoryid = dict.TryGetValue("productsubcategoryid", out var v19) && !string.IsNullOrEmpty(v19) ? (int)Convert.ChangeType(v19, typeof(int)) : null,
            Productmodelid = dict.TryGetValue("productmodelid", out var v20) && !string.IsNullOrEmpty(v20) ? (int)Convert.ChangeType(v20, typeof(int)) : null,
            Sellstartdate = dict.TryGetValue("sellstartdate", out var v21) && !string.IsNullOrEmpty(v21) ? (DateTime)Convert.ChangeType(v21, typeof(DateTime)) : default(DateTime),
            Sellenddate = dict.TryGetValue("sellenddate", out var v22) && !string.IsNullOrEmpty(v22) ? (DateTime)Convert.ChangeType(v22, typeof(DateTime)) : null,
            Discontinueddate = dict.TryGetValue("discontinueddate", out var v23) && !string.IsNullOrEmpty(v23) ? (DateTime)Convert.ChangeType(v23, typeof(DateTime)) : null,
            Rowguid = dict.TryGetValue("rowguid", out var v24) && !string.IsNullOrEmpty(v24) ? (Guid)Convert.ChangeType(v24, typeof(Guid)) : default(Guid),
            Modifieddate = dict.TryGetValue("modifieddate", out var v25) && !string.IsNullOrEmpty(v25) ? (DateTime)Convert.ChangeType(v25, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(ProductionProduct entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "name", Value = new Value { StringValue = entity.Name } });
        row.Entries.Add(new RowEntry { Column = "productnumber", Value = new Value { StringValue = entity.Productnumber } });
        row.Entries.Add(new RowEntry { Column = "makeflag", Value = new Value { StringValue = entity.Makeflag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "finishedgoodsflag", Value = new Value { StringValue = entity.Finishedgoodsflag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "color", Value = new Value { StringValue = entity.Color } });
        row.Entries.Add(new RowEntry { Column = "safetystocklevel", Value = new Value { StringValue = entity.Safetystocklevel.ToString() } });
        row.Entries.Add(new RowEntry { Column = "reorderpoint", Value = new Value { StringValue = entity.Reorderpoint.ToString() } });
        row.Entries.Add(new RowEntry { Column = "standardcost", Value = new Value { StringValue = entity.Standardcost.ToString() } });
        row.Entries.Add(new RowEntry { Column = "listprice", Value = new Value { StringValue = entity.Listprice.ToString() } });
        row.Entries.Add(new RowEntry { Column = "size", Value = new Value { StringValue = entity.Size } });
        row.Entries.Add(new RowEntry { Column = "sizeunitmeasurecode", Value = new Value { StringValue = entity.Sizeunitmeasurecode } });
        row.Entries.Add(new RowEntry { Column = "weightunitmeasurecode", Value = new Value { StringValue = entity.Weightunitmeasurecode } });
        if (entity.Weight != null)
        {
            row.Entries.Add(new RowEntry { Column = "weight", Value = new Value { StringValue = entity.Weight.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "weight", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "daystomanufacture", Value = new Value { StringValue = entity.Daystomanufacture.ToString() } });
        row.Entries.Add(new RowEntry { Column = "productline", Value = new Value { StringValue = entity.Productline } });
        row.Entries.Add(new RowEntry { Column = "class", Value = new Value { StringValue = entity.Class } });
        row.Entries.Add(new RowEntry { Column = "style", Value = new Value { StringValue = entity.Style } });
        if (entity.Productsubcategoryid != null)
        {
            row.Entries.Add(new RowEntry { Column = "productsubcategoryid", Value = new Value { StringValue = entity.Productsubcategoryid.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "productsubcategoryid", Value = new Value { StringValue = null } });
        }
        if (entity.Productmodelid != null)
        {
            row.Entries.Add(new RowEntry { Column = "productmodelid", Value = new Value { StringValue = entity.Productmodelid.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "productmodelid", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "sellstartdate", Value = new Value { StringValue = entity.Sellstartdate.ToString() } });
        if (entity.Sellenddate != null)
        {
            row.Entries.Add(new RowEntry { Column = "sellenddate", Value = new Value { StringValue = entity.Sellenddate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "sellenddate", Value = new Value { StringValue = null } });
        }
        if (entity.Discontinueddate != null)
        {
            row.Entries.Add(new RowEntry { Column = "discontinueddate", Value = new Value { StringValue = entity.Discontinueddate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "discontinueddate", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
