using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [humanresources].[employee] generated by the
// redfly PostgresGrpcPolyLangCompiler
// This is only meant to be indicative of the features available in the core product.

public class HumanresourcesEmployee : BasePostgresTableSchema
{
    public int Businessentityid { get; set; }
    public string Nationalidnumber { get; set; } = string.Empty;
    public string Loginid { get; set; } = string.Empty;
    public string Jobtitle { get; set; } = string.Empty;
    public DateTime Birthdate { get; set; }
    public string Maritalstatus { get; set; } = string.Empty;
    public string Gender { get; set; } = string.Empty;
    public DateTime Hiredate { get; set; }
    public bool Salariedflag { get; set; }
    public short Vacationhours { get; set; }
    public short Sickleavehours { get; set; }
    public bool Currentflag { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime Modifieddate { get; set; }
    public string? Organizationnode { get; set; }
}

public class HumanresourcesEmployeeRowsData : BaseTableRowsData
{
    public List<HumanresourcesEmployee> Rows { get; set; } = new();
}

public class HumanresourcesEmployeeInsertedData : BaseTableInsertedData
{
    public HumanresourcesEmployee? InsertedRow { get; set; }
}

public class HumanresourcesEmployeeRowData : BaseTableRowData
{
    public HumanresourcesEmployee? Row { get; set; }
}

public class HumanresourcesEmployeeDataSource : BasePostgresTableDataSource<HumanresourcesEmployee>
{
    public HumanresourcesEmployeeDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("humanresources");
        _encTable = RedflyEncryption.EncryptToString("employee");
    }

    public async Task<DeletedData> DeleteAsync(int businessentityid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("businessentityid", businessentityid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<HumanresourcesEmployeeRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<HumanresourcesEmployee>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new HumanresourcesEmployeeRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<HumanresourcesEmployeeInsertedData> InsertAsync(HumanresourcesEmployee entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new HumanresourcesEmployeeInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<HumanresourcesEmployeeRowData> GetAsync(int businessentityid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("businessentityid", businessentityid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new HumanresourcesEmployeeRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(HumanresourcesEmployee entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override HumanresourcesEmployee MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new HumanresourcesEmployee
        {
            Businessentityid = dict.TryGetValue("businessentityid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Nationalidnumber = dict.TryGetValue("nationalidnumber", out var v2) && !string.IsNullOrEmpty(v2) ? (string)Convert.ChangeType(v2, typeof(string)) : default(string),
            Loginid = dict.TryGetValue("loginid", out var v3) && !string.IsNullOrEmpty(v3) ? (string)Convert.ChangeType(v3, typeof(string)) : default(string),
            Jobtitle = dict.TryGetValue("jobtitle", out var v4) && !string.IsNullOrEmpty(v4) ? (string)Convert.ChangeType(v4, typeof(string)) : default(string),
            Birthdate = dict.TryGetValue("birthdate", out var v5) && !string.IsNullOrEmpty(v5) ? (DateTime)Convert.ChangeType(v5, typeof(DateTime)) : default(DateTime),
            Maritalstatus = dict.TryGetValue("maritalstatus", out var v6) && !string.IsNullOrEmpty(v6) ? (string)Convert.ChangeType(v6, typeof(string)) : default(string),
            Gender = dict.TryGetValue("gender", out var v7) && !string.IsNullOrEmpty(v7) ? (string)Convert.ChangeType(v7, typeof(string)) : default(string),
            Hiredate = dict.TryGetValue("hiredate", out var v8) && !string.IsNullOrEmpty(v8) ? (DateTime)Convert.ChangeType(v8, typeof(DateTime)) : default(DateTime),
            Salariedflag = dict.TryGetValue("salariedflag", out var v9) && !string.IsNullOrEmpty(v9) ? (bool)Convert.ChangeType(v9, typeof(bool)) : default(bool),
            Vacationhours = dict.TryGetValue("vacationhours", out var v10) && !string.IsNullOrEmpty(v10) ? (short)Convert.ChangeType(v10, typeof(short)) : default(short),
            Sickleavehours = dict.TryGetValue("sickleavehours", out var v11) && !string.IsNullOrEmpty(v11) ? (short)Convert.ChangeType(v11, typeof(short)) : default(short),
            Currentflag = dict.TryGetValue("currentflag", out var v12) && !string.IsNullOrEmpty(v12) ? (bool)Convert.ChangeType(v12, typeof(bool)) : default(bool),
            Rowguid = dict.TryGetValue("rowguid", out var v13) && !string.IsNullOrEmpty(v13) ? (Guid)Convert.ChangeType(v13, typeof(Guid)) : default(Guid),
            Modifieddate = dict.TryGetValue("modifieddate", out var v14) && !string.IsNullOrEmpty(v14) ? (DateTime)Convert.ChangeType(v14, typeof(DateTime)) : default(DateTime),
            Organizationnode = dict.TryGetValue("organizationnode", out var v15) && !string.IsNullOrEmpty(v15) ? (string)Convert.ChangeType(v15, typeof(string)) : null,
        };
    }

    protected override Row MapTableEntityToRow(HumanresourcesEmployee entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "businessentityid", Value = new Value { StringValue = entity.Businessentityid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "nationalidnumber", Value = new Value { StringValue = entity.Nationalidnumber } });
        row.Entries.Add(new RowEntry { Column = "loginid", Value = new Value { StringValue = entity.Loginid } });
        row.Entries.Add(new RowEntry { Column = "jobtitle", Value = new Value { StringValue = entity.Jobtitle } });
        row.Entries.Add(new RowEntry { Column = "birthdate", Value = new Value { StringValue = entity.Birthdate.ToString() } });
        row.Entries.Add(new RowEntry { Column = "maritalstatus", Value = new Value { StringValue = entity.Maritalstatus } });
        row.Entries.Add(new RowEntry { Column = "gender", Value = new Value { StringValue = entity.Gender } });
        row.Entries.Add(new RowEntry { Column = "hiredate", Value = new Value { StringValue = entity.Hiredate.ToString() } });
        row.Entries.Add(new RowEntry { Column = "salariedflag", Value = new Value { StringValue = entity.Salariedflag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "vacationhours", Value = new Value { StringValue = entity.Vacationhours.ToString() } });
        row.Entries.Add(new RowEntry { Column = "sickleavehours", Value = new Value { StringValue = entity.Sickleavehours.ToString() } });
        row.Entries.Add(new RowEntry { Column = "currentflag", Value = new Value { StringValue = entity.Currentflag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        row.Entries.Add(new RowEntry { Column = "organizationnode", Value = new Value { StringValue = entity.Organizationnode } });
        return row;
    }
}
