using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [person].[person] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:21:27 PM
// This is only meant to be indicative of the features available in the core product.

public class PersonPerson : BasePostgresTableSchema
{
    public int Businessentityid { get; set; }
    public string Persontype { get; set; } = string.Empty;
    public bool Namestyle { get; set; }
    public string? Title { get; set; }
    public string Firstname { get; set; } = string.Empty;
    public string? Middlename { get; set; }
    public string Lastname { get; set; } = string.Empty;
    public string? Suffix { get; set; }
    public int Emailpromotion { get; set; }
    public string? Additionalcontactinfo { get; set; }
    public string? Demographics { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class PersonPersonRowsData : BaseTableRowsData
{
    public List<PersonPerson> Rows { get; set; } = new();
}

public class PersonPersonInsertedData : BaseTableInsertedData
{
    public PersonPerson? InsertedRow { get; set; }
}

public class PersonPersonRowData : BaseTableRowData
{
    public PersonPerson? Row { get; set; }
}

public class PersonPersonDataSource : BasePostgresTableDataSource<PersonPerson>
{
    public PersonPersonDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("person");
        _encTable = RedflyEncryption.EncryptToString("person");
    }

    public async Task<DeletedData> DeleteAsync(int businessentityid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("businessentityid", businessentityid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<PersonPersonRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<PersonPerson>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new PersonPersonRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<PersonPersonInsertedData> InsertAsync(PersonPerson entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new PersonPersonInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<PersonPersonRowData> GetAsync(int businessentityid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("businessentityid", businessentityid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new PersonPersonRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(PersonPerson entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override PersonPerson MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new PersonPerson
        {
            Businessentityid = dict.TryGetValue("businessentityid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Persontype = dict.TryGetValue("persontype", out var v2) && !string.IsNullOrEmpty(v2) ? (string)Convert.ChangeType(v2, typeof(string)) : default(string),
            Namestyle = dict.TryGetValue("namestyle", out var v3) && !string.IsNullOrEmpty(v3) ? (bool)Convert.ChangeType(v3, typeof(bool)) : default(bool),
            Title = dict.TryGetValue("title", out var v4) && !string.IsNullOrEmpty(v4) ? (string)Convert.ChangeType(v4, typeof(string)) : null,
            Firstname = dict.TryGetValue("firstname", out var v5) && !string.IsNullOrEmpty(v5) ? (string)Convert.ChangeType(v5, typeof(string)) : default(string),
            Middlename = dict.TryGetValue("middlename", out var v6) && !string.IsNullOrEmpty(v6) ? (string)Convert.ChangeType(v6, typeof(string)) : null,
            Lastname = dict.TryGetValue("lastname", out var v7) && !string.IsNullOrEmpty(v7) ? (string)Convert.ChangeType(v7, typeof(string)) : default(string),
            Suffix = dict.TryGetValue("suffix", out var v8) && !string.IsNullOrEmpty(v8) ? (string)Convert.ChangeType(v8, typeof(string)) : null,
            Emailpromotion = dict.TryGetValue("emailpromotion", out var v9) && !string.IsNullOrEmpty(v9) ? (int)Convert.ChangeType(v9, typeof(int)) : default(int),
            Additionalcontactinfo = dict.TryGetValue("additionalcontactinfo", out var v10) && !string.IsNullOrEmpty(v10) ? (string)Convert.ChangeType(v10, typeof(string)) : null,
            Demographics = dict.TryGetValue("demographics", out var v11) && !string.IsNullOrEmpty(v11) ? (string)Convert.ChangeType(v11, typeof(string)) : null,
            Rowguid = dict.TryGetValue("rowguid", out var v12) && !string.IsNullOrEmpty(v12) ? (Guid)Convert.ChangeType(v12, typeof(Guid)) : default(Guid),
            Modifieddate = dict.TryGetValue("modifieddate", out var v13) && !string.IsNullOrEmpty(v13) ? (DateTime)Convert.ChangeType(v13, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(PersonPerson entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "businessentityid", Value = new Value { StringValue = entity.Businessentityid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "persontype", Value = new Value { StringValue = entity.Persontype } });
        row.Entries.Add(new RowEntry { Column = "namestyle", Value = new Value { StringValue = entity.Namestyle.ToString() } });
        row.Entries.Add(new RowEntry { Column = "title", Value = new Value { StringValue = entity.Title } });
        row.Entries.Add(new RowEntry { Column = "firstname", Value = new Value { StringValue = entity.Firstname } });
        row.Entries.Add(new RowEntry { Column = "middlename", Value = new Value { StringValue = entity.Middlename } });
        row.Entries.Add(new RowEntry { Column = "lastname", Value = new Value { StringValue = entity.Lastname } });
        row.Entries.Add(new RowEntry { Column = "suffix", Value = new Value { StringValue = entity.Suffix } });
        row.Entries.Add(new RowEntry { Column = "emailpromotion", Value = new Value { StringValue = entity.Emailpromotion.ToString() } });
        row.Entries.Add(new RowEntry { Column = "additionalcontactinfo", Value = new Value { StringValue = entity.Additionalcontactinfo } });
        row.Entries.Add(new RowEntry { Column = "demographics", Value = new Value { StringValue = entity.Demographics } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
