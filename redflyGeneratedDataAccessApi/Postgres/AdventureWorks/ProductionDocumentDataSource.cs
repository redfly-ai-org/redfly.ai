using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [production].[document] generated by the
// redfly PostgresGrpcPolyLangCompiler
// This is only meant to be indicative of the features available in the core product.

public class ProductionDocument : BasePostgresTableSchema
{
    public string Title { get; set; } = string.Empty;
    public int Owner { get; set; }
    public bool Folderflag { get; set; }
    public string Filename { get; set; } = string.Empty;
    public string? Fileextension { get; set; }
    public string Revision { get; set; } = string.Empty;
    public int Changenumber { get; set; }
    public short Status { get; set; }
    public string? Documentsummary { get; set; }
    public byte[]? Document { get; set; }
    public Guid Rowguid { get; set; }
    public DateTime Modifieddate { get; set; }
    public string Documentnode { get; set; } = string.Empty;
}

public class ProductionDocumentRowsData : BaseTableRowsData
{
    public List<ProductionDocument> Rows { get; set; } = new();
}

public class ProductionDocumentInsertedData : BaseTableInsertedData
{
    public ProductionDocument? InsertedRow { get; set; }
}

public class ProductionDocumentRowData : BaseTableRowData
{
    public ProductionDocument? Row { get; set; }
}

public class ProductionDocumentDataSource : BasePostgresTableDataSource<ProductionDocument>
{
    public ProductionDocumentDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("production");
        _encTable = RedflyEncryption.EncryptToString("document");
    }

    public async Task<DeletedData> DeleteAsync(string documentnode, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("documentnode", documentnode.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ProductionDocumentRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ProductionDocument>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ProductionDocumentRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ProductionDocumentInsertedData> InsertAsync(ProductionDocument entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ProductionDocumentInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ProductionDocumentRowData> GetAsync(string documentnode, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("documentnode", documentnode.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ProductionDocumentRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ProductionDocument entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ProductionDocument MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ProductionDocument
        {
            Title = dict.TryGetValue("title", out var v1) && !string.IsNullOrEmpty(v1) ? (string)Convert.ChangeType(v1, typeof(string)) : default(string),
            Owner = dict.TryGetValue("owner", out var v2) && !string.IsNullOrEmpty(v2) ? (int)Convert.ChangeType(v2, typeof(int)) : default(int),
            Folderflag = dict.TryGetValue("folderflag", out var v3) && !string.IsNullOrEmpty(v3) ? (bool)Convert.ChangeType(v3, typeof(bool)) : default(bool),
            Filename = dict.TryGetValue("filename", out var v4) && !string.IsNullOrEmpty(v4) ? (string)Convert.ChangeType(v4, typeof(string)) : default(string),
            Fileextension = dict.TryGetValue("fileextension", out var v5) && !string.IsNullOrEmpty(v5) ? (string)Convert.ChangeType(v5, typeof(string)) : null,
            Revision = dict.TryGetValue("revision", out var v6) && !string.IsNullOrEmpty(v6) ? (string)Convert.ChangeType(v6, typeof(string)) : default(string),
            Changenumber = dict.TryGetValue("changenumber", out var v7) && !string.IsNullOrEmpty(v7) ? (int)Convert.ChangeType(v7, typeof(int)) : default(int),
            Status = dict.TryGetValue("status", out var v8) && !string.IsNullOrEmpty(v8) ? (short)Convert.ChangeType(v8, typeof(short)) : default(short),
            Documentsummary = dict.TryGetValue("documentsummary", out var v9) && !string.IsNullOrEmpty(v9) ? (string)Convert.ChangeType(v9, typeof(string)) : null,
            Document = dict.TryGetValue("document", out var v10) && !string.IsNullOrEmpty(v10) ? (byte[])Convert.ChangeType(v10, typeof(byte[])) : default(byte[]),
            Rowguid = dict.TryGetValue("rowguid", out var v11) && !string.IsNullOrEmpty(v11) ? (Guid)Convert.ChangeType(v11, typeof(Guid)) : default(Guid),
            Modifieddate = dict.TryGetValue("modifieddate", out var v12) && !string.IsNullOrEmpty(v12) ? (DateTime)Convert.ChangeType(v12, typeof(DateTime)) : default(DateTime),
            Documentnode = dict.TryGetValue("documentnode", out var v13) && !string.IsNullOrEmpty(v13) ? (string)Convert.ChangeType(v13, typeof(string)) : default(string),
        };
    }

    protected override Row MapTableEntityToRow(ProductionDocument entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "documentnode", Value = new Value { StringValue = entity.Documentnode.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "title", Value = new Value { StringValue = entity.Title } });
        row.Entries.Add(new RowEntry { Column = "owner", Value = new Value { StringValue = entity.Owner.ToString() } });
        row.Entries.Add(new RowEntry { Column = "folderflag", Value = new Value { StringValue = entity.Folderflag.ToString() } });
        row.Entries.Add(new RowEntry { Column = "filename", Value = new Value { StringValue = entity.Filename } });
        row.Entries.Add(new RowEntry { Column = "fileextension", Value = new Value { StringValue = entity.Fileextension } });
        row.Entries.Add(new RowEntry { Column = "revision", Value = new Value { StringValue = entity.Revision } });
        row.Entries.Add(new RowEntry { Column = "changenumber", Value = new Value { StringValue = entity.Changenumber.ToString() } });
        row.Entries.Add(new RowEntry { Column = "status", Value = new Value { StringValue = entity.Status.ToString() } });
        row.Entries.Add(new RowEntry { Column = "documentsummary", Value = new Value { StringValue = entity.Documentsummary } });
        row.Entries.Add(new RowEntry { Column = "document", Value = new Value { StringValue = entity.Document != null ? Convert.ToBase64String(entity.Document) : null } });
        row.Entries.Add(new RowEntry { Column = "rowguid", Value = new Value { StringValue = entity.Rowguid.ToString() } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
