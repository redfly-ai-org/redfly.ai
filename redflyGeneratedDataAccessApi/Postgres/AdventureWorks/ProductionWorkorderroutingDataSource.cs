using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [production].[workorderrouting] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:21:28 PM
// This is only meant to be indicative of the features available in the core product.

public class ProductionWorkorderrouting : BasePostgresTableSchema
{
    public int Workorderid { get; set; }
    public int Productid { get; set; }
    public short Operationsequence { get; set; }
    public int Locationid { get; set; }
    public DateTime Scheduledstartdate { get; set; }
    public DateTime Scheduledenddate { get; set; }
    public DateTime? Actualstartdate { get; set; }
    public DateTime? Actualenddate { get; set; }
    public decimal? Actualresourcehrs { get; set; }
    public decimal Plannedcost { get; set; }
    public decimal? Actualcost { get; set; }
    public DateTime Modifieddate { get; set; }
}

public class ProductionWorkorderroutingRowsData : BaseTableRowsData
{
    public List<ProductionWorkorderrouting> Rows { get; set; } = new();
}

public class ProductionWorkorderroutingInsertedData : BaseTableInsertedData
{
    public ProductionWorkorderrouting? InsertedRow { get; set; }
}

public class ProductionWorkorderroutingRowData : BaseTableRowData
{
    public ProductionWorkorderrouting? Row { get; set; }
}

public class ProductionWorkorderroutingDataSource : BasePostgresTableDataSource<ProductionWorkorderrouting>
{
    public ProductionWorkorderroutingDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("production");
        _encTable = RedflyEncryption.EncryptToString("workorderrouting");
    }

    public async Task<DeletedData> DeleteAsync(int workorderid, int productid, short operationsequence, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("workorderid", workorderid.ToString());
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        req.PrimaryKeyValues.Add("operationsequence", operationsequence.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<ProductionWorkorderroutingRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<ProductionWorkorderrouting>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new ProductionWorkorderroutingRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<ProductionWorkorderroutingInsertedData> InsertAsync(ProductionWorkorderrouting entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new ProductionWorkorderroutingInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<ProductionWorkorderroutingRowData> GetAsync(int workorderid, int productid, short operationsequence, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("workorderid", workorderid.ToString());
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        req.PrimaryKeyValues.Add("operationsequence", operationsequence.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new ProductionWorkorderroutingRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(ProductionWorkorderrouting entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override ProductionWorkorderrouting MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new ProductionWorkorderrouting
        {
            Workorderid = dict.TryGetValue("workorderid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Productid = dict.TryGetValue("productid", out var v2) && !string.IsNullOrEmpty(v2) ? (int)Convert.ChangeType(v2, typeof(int)) : default(int),
            Operationsequence = dict.TryGetValue("operationsequence", out var v3) && !string.IsNullOrEmpty(v3) ? (short)Convert.ChangeType(v3, typeof(short)) : default(short),
            Locationid = dict.TryGetValue("locationid", out var v4) && !string.IsNullOrEmpty(v4) ? (int)Convert.ChangeType(v4, typeof(int)) : default(int),
            Scheduledstartdate = dict.TryGetValue("scheduledstartdate", out var v5) && !string.IsNullOrEmpty(v5) ? (DateTime)Convert.ChangeType(v5, typeof(DateTime)) : default(DateTime),
            Scheduledenddate = dict.TryGetValue("scheduledenddate", out var v6) && !string.IsNullOrEmpty(v6) ? (DateTime)Convert.ChangeType(v6, typeof(DateTime)) : default(DateTime),
            Actualstartdate = dict.TryGetValue("actualstartdate", out var v7) && !string.IsNullOrEmpty(v7) ? (DateTime)Convert.ChangeType(v7, typeof(DateTime)) : null,
            Actualenddate = dict.TryGetValue("actualenddate", out var v8) && !string.IsNullOrEmpty(v8) ? (DateTime)Convert.ChangeType(v8, typeof(DateTime)) : null,
            Actualresourcehrs = dict.TryGetValue("actualresourcehrs", out var v9) && !string.IsNullOrEmpty(v9) ? (decimal)Convert.ChangeType(v9, typeof(decimal)) : null,
            Plannedcost = dict.TryGetValue("plannedcost", out var v10) && !string.IsNullOrEmpty(v10) ? (decimal)Convert.ChangeType(v10, typeof(decimal)) : default(decimal),
            Actualcost = dict.TryGetValue("actualcost", out var v11) && !string.IsNullOrEmpty(v11) ? (decimal)Convert.ChangeType(v11, typeof(decimal)) : null,
            Modifieddate = dict.TryGetValue("modifieddate", out var v12) && !string.IsNullOrEmpty(v12) ? (DateTime)Convert.ChangeType(v12, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(ProductionWorkorderrouting entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "workorderid", Value = new Value { StringValue = entity.Workorderid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "operationsequence", Value = new Value { StringValue = entity.Operationsequence.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "locationid", Value = new Value { StringValue = entity.Locationid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "scheduledstartdate", Value = new Value { StringValue = entity.Scheduledstartdate.ToString() } });
        row.Entries.Add(new RowEntry { Column = "scheduledenddate", Value = new Value { StringValue = entity.Scheduledenddate.ToString() } });
        if (entity.Actualstartdate != null)
        {
            row.Entries.Add(new RowEntry { Column = "actualstartdate", Value = new Value { StringValue = entity.Actualstartdate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "actualstartdate", Value = new Value { StringValue = null } });
        }
        if (entity.Actualenddate != null)
        {
            row.Entries.Add(new RowEntry { Column = "actualenddate", Value = new Value { StringValue = entity.Actualenddate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "actualenddate", Value = new Value { StringValue = null } });
        }
        if (entity.Actualresourcehrs != null)
        {
            row.Entries.Add(new RowEntry { Column = "actualresourcehrs", Value = new Value { StringValue = entity.Actualresourcehrs.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "actualresourcehrs", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "plannedcost", Value = new Value { StringValue = entity.Plannedcost.ToString() } });
        if (entity.Actualcost != null)
        {
            row.Entries.Add(new RowEntry { Column = "actualcost", Value = new Value { StringValue = entity.Actualcost.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "actualcost", Value = new Value { StringValue = null } });
        }
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
