using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RedflyCoreFramework;
using redflyDatabaseAdapters;
using redflyGeneratedDataAccessApi.Base;
using redflyGeneratedDataAccessApi.Common;
using redflyGeneratedDataAccessApi.Protos.DatabaseApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redflyGeneratedDataAccessApi.Postgres.AdventureWorks;

// Strongly-typed classes for [purchasing].[productvendor] generated by the
// redfly PostgresGrpcPolyLangCompiler on 06/06/25 04:28:19 PM
// This is only meant to be indicative of the features available in the core product.

public class PurchasingProductvendor : BasePostgresTableSchema
{
    public int Productid { get; set; }
    public int Businessentityid { get; set; }
    public int Averageleadtime { get; set; }
    public decimal Standardprice { get; set; }
    public decimal? Lastreceiptcost { get; set; }
    public DateTime? Lastreceiptdate { get; set; }
    public int Minorderqty { get; set; }
    public int Maxorderqty { get; set; }
    public int? Onorderqty { get; set; }
    public string Unitmeasurecode { get; set; } = string.Empty;
    public DateTime Modifieddate { get; set; }
}

public class PurchasingProductvendorRowsData : BaseTableRowsData
{
    public List<PurchasingProductvendor> Rows { get; set; } = new();
}

public class PurchasingProductvendorInsertedData : BaseTableInsertedData
{
    public PurchasingProductvendor? InsertedRow { get; set; }
}

public class PurchasingProductvendorRowData : BaseTableRowData
{
    public PurchasingProductvendor? Row { get; set; }
}

public class PurchasingProductvendorDataSource : BasePostgresTableDataSource<PurchasingProductvendor>
{
    public PurchasingProductvendorDataSource() : base()
    {
        _encSchema = RedflyEncryption.EncryptToString("purchasing");
        _encTable = RedflyEncryption.EncryptToString("productvendor");
    }

    public async Task<DeletedData> DeleteAsync(int productid, int businessentityid, bool modifyCache = true)
    {
        var req = base.CreateDeleteRequest(modifyCache);
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        req.PrimaryKeyValues.Add("businessentityid", businessentityid.ToString());
        return await base.DeleteCoreAsync(req);
    }

    public async Task<PurchasingProductvendorRowsData> GetRowsAsync(int pageNo = 1, int pageSize = 50, string orderByColumnName = "", string orderBySort = "", bool useCache = true)
    {
        var req = base.CreateGetRowsRequest(pageNo, pageSize, orderByColumnName, orderBySort);
        var resp = await _client.GetRowsAsync(req, AppGrpcSession.Headers!);
        var rows = new List<PurchasingProductvendor>();
        foreach (var row in resp.Rows)
        {
            rows.Add(MapRowToTableEntity(row));
        }
        return new PurchasingProductvendorRowsData
        {
            Success = resp.Success,
            Rows = rows,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<PurchasingProductvendorInsertedData> InsertAsync(PurchasingProductvendor entity, bool modifyCache = true)
    {
        var req = base.CreateInsertRequest(entity, modifyCache);
        var resp = await _client.InsertAsync(req, AppGrpcSession.Headers!);
        return new PurchasingProductvendorInsertedData
        {
            Success = resp.Success,
            InsertedRow = resp.InsertedRow != null ? MapRowToTableEntity(resp.InsertedRow) : null,
            CacheUpdated = resp.CacheUpdated,
            Message = resp.Message
        };
    }

    public async Task<PurchasingProductvendorRowData> GetAsync(int productid, int businessentityid, bool useCache = true)
    {
        var req = base.CreateGetRequest();
        req.PrimaryKeyValues.Add("productid", productid.ToString());
        req.PrimaryKeyValues.Add("businessentityid", businessentityid.ToString());
        var resp = await _client.GetAsync(req, AppGrpcSession.Headers!);
        return new PurchasingProductvendorRowData
        {
            Success = resp.Success,
            Row = resp.Row != null ? MapRowToTableEntity(resp.Row) : null,
            FromCache = resp.FromCache,
            Message = resp.Message
        };
    }

    public async Task<UpdatedData> UpdateAsync(PurchasingProductvendor entity, bool modifyCache = true)
    {
        var req = CreateUpdateRequest(entity, modifyCache);
        return await UpdateCoreAsync(req);
    }

    protected override PurchasingProductvendor MapRowToTableEntity(Row row)
    {
        var dict = new Dictionary<string, string?>();
        foreach (var entry in row.Entries)
        {
            dict[entry.Column] = entry.Value?.StringValue;
        }
        return new PurchasingProductvendor
        {
            Productid = dict.TryGetValue("productid", out var v1) && !string.IsNullOrEmpty(v1) ? (int)Convert.ChangeType(v1, typeof(int)) : default(int),
            Businessentityid = dict.TryGetValue("businessentityid", out var v2) && !string.IsNullOrEmpty(v2) ? (int)Convert.ChangeType(v2, typeof(int)) : default(int),
            Averageleadtime = dict.TryGetValue("averageleadtime", out var v3) && !string.IsNullOrEmpty(v3) ? (int)Convert.ChangeType(v3, typeof(int)) : default(int),
            Standardprice = dict.TryGetValue("standardprice", out var v4) && !string.IsNullOrEmpty(v4) ? (decimal)Convert.ChangeType(v4, typeof(decimal)) : default(decimal),
            Lastreceiptcost = dict.TryGetValue("lastreceiptcost", out var v5) && !string.IsNullOrEmpty(v5) ? (decimal)Convert.ChangeType(v5, typeof(decimal)) : null,
            Lastreceiptdate = dict.TryGetValue("lastreceiptdate", out var v6) && !string.IsNullOrEmpty(v6) ? (DateTime)Convert.ChangeType(v6, typeof(DateTime)) : null,
            Minorderqty = dict.TryGetValue("minorderqty", out var v7) && !string.IsNullOrEmpty(v7) ? (int)Convert.ChangeType(v7, typeof(int)) : default(int),
            Maxorderqty = dict.TryGetValue("maxorderqty", out var v8) && !string.IsNullOrEmpty(v8) ? (int)Convert.ChangeType(v8, typeof(int)) : default(int),
            Onorderqty = dict.TryGetValue("onorderqty", out var v9) && !string.IsNullOrEmpty(v9) ? (int)Convert.ChangeType(v9, typeof(int)) : null,
            Unitmeasurecode = dict.TryGetValue("unitmeasurecode", out var v10) && !string.IsNullOrEmpty(v10) ? (string)Convert.ChangeType(v10, typeof(string)) : default(string),
            Modifieddate = dict.TryGetValue("modifieddate", out var v11) && !string.IsNullOrEmpty(v11) ? (DateTime)Convert.ChangeType(v11, typeof(DateTime)) : default(DateTime),
        };
    }

    protected override Row MapTableEntityToRow(PurchasingProductvendor entity, DbOperationType dbOperationType)
    {
        var row = new Row();

        row.Entries.Add(new RowEntry { Column = "productid", Value = new Value { StringValue = entity.Productid.ToString() } });
        row.Entries.Add(new RowEntry { Column = "businessentityid", Value = new Value { StringValue = entity.Businessentityid.ToString() } });

        // For Postgres, add all non-primary key columns
        row.Entries.Add(new RowEntry { Column = "averageleadtime", Value = new Value { StringValue = entity.Averageleadtime.ToString() } });
        row.Entries.Add(new RowEntry { Column = "standardprice", Value = new Value { StringValue = entity.Standardprice.ToString() } });
        if (entity.Lastreceiptcost != null)
        {
            row.Entries.Add(new RowEntry { Column = "lastreceiptcost", Value = new Value { StringValue = entity.Lastreceiptcost.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "lastreceiptcost", Value = new Value { StringValue = null } });
        }
        if (entity.Lastreceiptdate != null)
        {
            row.Entries.Add(new RowEntry { Column = "lastreceiptdate", Value = new Value { StringValue = entity.Lastreceiptdate.Value.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "lastreceiptdate", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "minorderqty", Value = new Value { StringValue = entity.Minorderqty.ToString() } });
        row.Entries.Add(new RowEntry { Column = "maxorderqty", Value = new Value { StringValue = entity.Maxorderqty.ToString() } });
        if (entity.Onorderqty != null)
        {
            row.Entries.Add(new RowEntry { Column = "onorderqty", Value = new Value { StringValue = entity.Onorderqty.ToString() } });
        }
        else
        {
            row.Entries.Add(new RowEntry { Column = "onorderqty", Value = new Value { StringValue = null } });
        }
        row.Entries.Add(new RowEntry { Column = "unitmeasurecode", Value = new Value { StringValue = entity.Unitmeasurecode } });
        if (entity.Modifieddate != DateTime.MinValue)
        {
            row.Entries.Add(new RowEntry { Column = "modifieddate", Value = new Value { StringValue = entity.Modifieddate.ToString("yyyy-MM-dd HH:mm:ss.fff") } });
        }
        return row;
    }
}
