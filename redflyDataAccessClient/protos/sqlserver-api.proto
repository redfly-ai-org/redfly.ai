syntax = "proto3";

option csharp_namespace = "redflyDataAccessClient.Protos.SqlServer";

package sqlserverapi;

// Represents a generic value for a table column.
message Value {
  // The value as a string (all values are transmitted as strings; conversion happens on the server side)
  string string_value = 1;
}

// Represents a dictionary entry for a row (column name to value).
message RowEntry {
  string column = 1;
  Value value = 2;
}

// Represents a full row as a repeated list of RowEntry.
message Row {
  repeated RowEntry entries = 1;
}

// Generic request to specify a table name.
message TableRequest {
  string table_name = 1;
}

// Request for GetTotalRowCount.
message GetTotalRowCountRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
}

message GetTotalRowCountResponse {
  int64 total = 1;
  bool fromCache = 2;
  string message = 3;
}

// Request for Delete.
message DeleteRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  map<string, string> primary_key_values = 9; // key: PK column name, value: PK value
  bool modify_cache = 10;
}

message DeleteResponse {
  bool success = 1;
  bool cacheUpdated = 2;
  string message = 3;
}

// Request for GetRows.
message GetRowsRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  int32 page_no = 9;
  int32 page_size = 10;
  string orderby_column_name = 11;
  string orderby_column_sort = 12; // "asc" or "desc"
}

message GetRowsResponse {
  bool success = 1;
  repeated Row rows = 2;
  bool fromCache = 3;
  string message = 4;
}

// Request for Insert.
message InsertRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  Row row = 9;
  bool modify_cache = 10;
}

message InsertResponse {
  bool success = 1;
  Row inserted_row = 2;
  bool cacheUpdated = 3;
  string message = 4;
  Row row = 5;
}

// Request for Get.
message GetRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  map<string, string> primary_key_values = 9; // key: PK column name, value: PK value
}

message GetResponse {
  bool success = 1;
  Row row = 2;
  bool fromCache = 3;
  string message = 4;
}

// Request for Update.
message UpdateRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_schema_name = 3;
  string encrypted_table_name = 4;
  string encrypted_client_id = 5;
  string encrypted_database_id = 6;
  string encryptedServerOnlyConnectionString = 7;
  string encryption_key = 8;
  Row row = 9;
  bool modify_cache = 10;
}

message UpdateResponse {
  bool success = 1;
  int32 updated_count = 2;
  bool cacheUpdated = 3;
  string message = 4;
}

// The generic SQL Server API service.
service NativeGrpcSqlServerApiService {
  rpc GetTotalRowCount(GetTotalRowCountRequest) returns (GetTotalRowCountResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc GetRows(GetRowsRequest) returns (GetRowsResponse);
  rpc Insert(InsertRequest) returns (InsertResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
}