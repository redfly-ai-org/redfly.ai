syntax = "proto3";

option csharp_namespace = "redflyDataAccessClient.Protos.SqlServer";

package sqlserverapi;

// Represents a generic value for a table column.
message Value {
  // The value as a string (all values are transmitted as strings; conversion happens on the server side)
  string string_value = 1;
}

// Represents a dictionary entry for a row (column name to value).
message RowEntry {
  string column = 1;
  Value value = 2;
}

// Represents a full row as a repeated list of RowEntry.
message Row {
  repeated RowEntry entries = 1;
}

// Generic request to specify a table name.
message TableRequest {
  string table_name = 1;
}

// Request for GetTotalRowCount.
message GetTotalRowCountRequest {
  string encrypted_database_server_name = 1;
  string encrypted_database_name = 2;
  string encrypted_table_name = 3;
  string encrypted_client_id = 4;
  string encrypted_database_id = 5;
  string encryptedServerOnlyConnectionString = 6;
  string encryption_key = 7;
}

message GetTotalRowCountResponse {
  int64 total = 1;
}

// Request for Delete.
message DeleteRequest {
  string table_name = 1;
  repeated string primary_key_values = 2; // Use order for composite PKs
  bool modify_cache = 3;
}

message DeleteResponse {
  bool success = 1;
}

// Request for GetRows.
message GetRowsRequest {
  string table_name = 1;
  int32 page_no = 2;
  int32 page_size = 3;
  bool use_cache = 4;
}

message GetRowsResponse {
  repeated Row rows = 1;
}

// Request for Insert.
message InsertRequest {
  string table_name = 1;
  Row row = 2;
  bool modify_cache = 3;
}

message InsertResponse {
  Row inserted_row = 1;
}

// Request for Get.
message GetRequest {
  string table_name = 1;
  repeated string primary_key_values = 2; // Use order for composite PKs
  bool use_cache = 3;
}

message GetResponse {
  Row row = 1;
}

// Request for Update.
message UpdateRequest {
  string table_name = 1;
  Row row = 2;
  bool modify_cache = 3;
}

message UpdateResponse {
  int32 updated_count = 1;
}

// The generic SQL Server API service.
service NativeGrpcSqlServerApiService {
  rpc GetTotalRowCount(GetTotalRowCountRequest) returns (GetTotalRowCountResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc GetRows(GetRowsRequest) returns (GetRowsResponse);
  rpc Insert(InsertRequest) returns (InsertResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
}